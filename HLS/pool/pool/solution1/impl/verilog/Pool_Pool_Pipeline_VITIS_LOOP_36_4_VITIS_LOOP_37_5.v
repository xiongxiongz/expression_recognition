// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Pool_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sum,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        mul_i92,
        Kx,
        select_ln25_1,
        rhs_V_1,
        rhs_V_2,
        mul_ln40,
        mode,
        zext_ln1495,
        feature_in,
        sum_3_out,
        sum_3_out_ap_vld,
        grp_fu_361_p_din0,
        grp_fu_361_p_din1,
        grp_fu_361_p_dout0,
        grp_fu_361_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sum;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [15:0] mul_i92;
input  [7:0] Kx;
input  [15:0] select_ln25_1;
input  [15:0] rhs_V_1;
input  [15:0] rhs_V_2;
input  [15:0] mul_ln40;
input  [1:0] mode;
input  [15:0] zext_ln1495;
input  [63:0] feature_in;
output  [31:0] sum_3_out;
output   sum_3_out_ap_vld;
output  [32:0] grp_fu_361_p_din0;
output  [15:0] grp_fu_361_p_din1;
input  [47:0] grp_fu_361_p_dout0;
output   grp_fu_361_p_ce;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg sum_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state10_pp0_stage4_iter1;
wire    ap_block_state15_pp0_stage4_iter2;
wire    ap_block_state20_pp0_stage4_iter3;
wire    ap_block_pp0_stage4_subdone;
reg   [0:0] icmp_ln1027_reg_798;
reg    ap_condition_exit_pp0_iter0_stage4;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg   [31:0] grp_load_fu_237_p1;
reg   [31:0] reg_242;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state12_pp0_stage1_iter2;
wire    ap_block_state17_pp0_stage1_iter3;
wire    ap_block_state22_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_state16_pp0_stage0_iter3;
wire    ap_block_state21_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [47:0] zext_ln1495_cast_fu_248_p1;
reg   [47:0] zext_ln1495_cast_reg_778;
wire   [47:0] rhs_V_2_cast_fu_252_p1;
reg   [47:0] rhs_V_2_cast_reg_785;
wire   [31:0] rhs_V_1_cast_fu_256_p1;
reg   [31:0] rhs_V_1_cast_reg_790;
wire   [0:0] icmp_ln1027_fu_283_p2;
reg   [0:0] icmp_ln1027_reg_798_pp0_iter1_reg;
reg   [0:0] icmp_ln1027_reg_798_pp0_iter2_reg;
reg   [0:0] icmp_ln1027_reg_798_pp0_iter3_reg;
wire   [15:0] add_ln1027_fu_289_p2;
reg   [15:0] add_ln1027_reg_802;
reg   [7:0] ii_load_reg_807;
wire   [0:0] icmp_ln1027_1_fu_301_p2;
reg   [0:0] icmp_ln1027_1_reg_812;
wire   [7:0] select_ln36_fu_307_p3;
reg   [7:0] select_ln36_reg_817;
wire   [7:0] add_ln36_1_fu_315_p2;
reg   [7:0] add_ln36_1_reg_822;
wire  signed [47:0] grp_fu_705_p3;
reg  signed [47:0] lhs_V_5_reg_847;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
reg    ap_block_state9_io;
wire    ap_block_state14_pp0_stage3_iter2;
wire    ap_block_state19_pp0_stage3_iter3;
reg    ap_block_pp0_stage3_11001;
wire  signed [47:0] grp_fu_712_p3;
reg  signed [47:0] lhs_V_4_reg_852;
wire  signed [47:0] grp_fu_719_p3;
reg  signed [47:0] ret_V_8_reg_857;
wire  signed [31:0] grp_fu_726_p2;
reg  signed [31:0] mul_ln36_reg_862;
wire    ap_block_pp0_stage4_11001;
wire  signed [47:0] sext_ln36_1_fu_380_p1;
reg   [47:0] mul_ln36_1_reg_872;
reg   [63:0] gmem_addr_2_reg_879;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_state13_pp0_stage2_iter2;
wire    ap_block_state18_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
reg   [63:0] gmem_addr_1_reg_885;
reg   [63:0] gmem_addr_reg_891;
reg   [31:0] gmem_addr_2_read_reg_897;
reg   [7:0] tmp_4_reg_902;
wire   [22:0] trunc_ln45_1_fu_521_p1;
reg   [22:0] trunc_ln45_1_reg_907;
reg   [31:0] gmem_addr_1_read_reg_912;
reg   [7:0] tmp_1_reg_917;
wire   [22:0] trunc_ln44_1_fu_535_p1;
reg   [22:0] trunc_ln44_1_reg_922;
reg   [31:0] gmem_addr_read_reg_927;
wire   [31:0] bitcast_ln45_fu_539_p1;
reg   [31:0] bitcast_ln45_reg_932;
wire   [0:0] icmp_ln45_2_fu_543_p2;
reg   [0:0] icmp_ln45_2_reg_938;
wire   [0:0] icmp_ln45_3_fu_548_p2;
reg   [0:0] icmp_ln45_3_reg_943;
wire   [31:0] bitcast_ln44_fu_553_p1;
reg   [31:0] bitcast_ln44_reg_948;
wire   [0:0] icmp_ln44_2_fu_557_p2;
reg   [0:0] icmp_ln44_2_reg_954;
wire   [0:0] icmp_ln44_3_fu_562_p2;
reg   [0:0] icmp_ln44_3_reg_959;
wire   [31:0] select_ln45_fu_623_p3;
reg   [31:0] select_ln45_reg_969;
wire   [31:0] select_ln44_fu_682_p3;
reg   [31:0] select_ln44_reg_974;
wire   [31:0] grp_fu_229_p2;
reg   [31:0] sum_2_reg_979;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire  signed [63:0] sext_ln45_fu_419_p1;
wire    ap_block_pp0_stage2;
wire  signed [63:0] sext_ln44_fu_460_p1;
wire  signed [63:0] sext_ln43_fu_501_p1;
reg   [7:0] jj_fu_110;
wire   [7:0] jj_1_fu_370_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_jj_load;
reg   [7:0] ii_fu_114;
wire   [7:0] select_ln36_1_fu_343_p3;
reg   [7:0] ap_sig_allocacmp_ii_load;
reg   [15:0] indvar_flatten_fu_118;
reg   [15:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [31:0] sum_1_fu_122;
reg   [31:0] ap_sig_allocacmp_sum_1_load_3;
wire    ap_block_pp0_stage1;
reg   [31:0] ap_sig_allocacmp_sum_1_load_2;
reg   [31:0] ap_sig_allocacmp_sum_1_load_1;
wire    ap_block_pp0_stage1_01001;
wire   [31:0] grp_fu_229_p1;
reg   [31:0] grp_fu_233_p1;
wire   [15:0] zext_ln40_fu_321_p1;
wire  signed [15:0] lhs_V_fu_325_p2;
wire   [15:0] zext_ln36_fu_348_p1;
wire  signed [15:0] add_ln36_fu_352_p2;
wire    ap_block_pp0_stage4;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_6_fu_388_p2;
wire   [49:0] shl_ln3_fu_392_p3;
wire  signed [63:0] sext_ln45_1_fu_400_p1;
wire   [63:0] add_ln45_fu_404_p2;
wire   [61:0] trunc_ln3_fu_409_p4;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_3_fu_429_p2;
wire   [49:0] shl_ln2_fu_433_p3;
wire  signed [63:0] sext_ln44_1_fu_441_p1;
wire   [63:0] add_ln44_fu_445_p2;
wire   [61:0] trunc_ln2_fu_450_p4;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_fu_470_p2;
wire   [49:0] shl_ln1_fu_474_p3;
wire  signed [63:0] sext_ln43_1_fu_482_p1;
wire   [63:0] add_ln43_fu_486_p2;
wire   [61:0] trunc_ln1_fu_491_p4;
wire   [31:0] bitcast_ln45_1_fu_571_p1;
wire   [7:0] tmp_3_fu_575_p4;
wire   [22:0] trunc_ln45_fu_585_p1;
wire   [0:0] icmp_ln45_1_fu_595_p2;
wire   [0:0] icmp_ln45_fu_589_p2;
wire   [0:0] grp_fu_233_p2;
wire   [0:0] or_ln45_fu_601_p2;
wire   [0:0] and_ln45_fu_611_p2;
wire   [0:0] or_ln45_1_fu_607_p2;
wire   [0:0] and_ln45_1_fu_617_p2;
wire   [31:0] bitcast_ln44_1_fu_630_p1;
wire   [7:0] tmp_fu_634_p4;
wire   [22:0] trunc_ln44_fu_644_p1;
wire   [0:0] icmp_ln44_1_fu_654_p2;
wire   [0:0] icmp_ln44_fu_648_p2;
wire   [0:0] or_ln44_fu_660_p2;
wire   [0:0] and_ln44_fu_670_p2;
wire   [0:0] or_ln44_1_fu_666_p2;
wire   [0:0] and_ln44_1_fu_676_p2;
wire   [15:0] grp_fu_705_p1;
wire   [15:0] grp_fu_705_p2;
wire   [15:0] grp_fu_712_p1;
wire   [15:0] grp_fu_712_p2;
wire   [15:0] grp_fu_719_p1;
wire   [15:0] grp_fu_719_p2;
wire   [15:0] grp_fu_726_p1;
reg    grp_fu_229_ce;
reg    grp_fu_233_ce;
wire    ap_block_pp0_stage1_00001;
reg    grp_fu_383_ce;
reg    grp_fu_705_ce;
reg    grp_fu_712_ce;
reg    grp_fu_719_ce;
reg    grp_fu_726_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter3_stage1;
reg    ap_idle_pp0_0to2;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
reg    ap_done_pending_pp0;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_455;
reg    ap_condition_398;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

Pool_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_load_fu_237_p1),
    .din1(grp_fu_229_p1),
    .ce(grp_fu_229_ce),
    .dout(grp_fu_229_p2)
);

Pool_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_load_fu_237_p1),
    .din1(grp_fu_233_p1),
    .ce(grp_fu_233_ce),
    .opcode(5'd2),
    .dout(grp_fu_233_p2)
);

Pool_mac_muladd_16s_16ns_16ns_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
mac_muladd_16s_16ns_16ns_48_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_V_fu_325_p2),
    .din1(grp_fu_705_p1),
    .din2(grp_fu_705_p2),
    .ce(grp_fu_705_ce),
    .dout(grp_fu_705_p3)
);

Pool_mac_muladd_16s_16ns_16ns_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
mac_muladd_16s_16ns_16ns_48_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_V_fu_325_p2),
    .din1(grp_fu_712_p1),
    .din2(grp_fu_712_p2),
    .ce(grp_fu_712_ce),
    .dout(grp_fu_712_p3)
);

Pool_mac_muladd_16s_16ns_16ns_48_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
mac_muladd_16s_16ns_16ns_48_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lhs_V_fu_325_p2),
    .din1(grp_fu_719_p1),
    .din2(grp_fu_719_p2),
    .ce(grp_fu_719_ce),
    .dout(grp_fu_719_p3)
);

Pool_mul_mul_16s_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16ns_32_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln36_fu_352_p2),
    .din1(grp_fu_726_p1),
    .ce(grp_fu_726_ce),
    .dout(grp_fu_726_p2)
);

Pool_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage4),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ii_fu_114 <= 8'd0;
    end else if (((icmp_ln1027_reg_798 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ii_fu_114 <= select_ln36_1_fu_343_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_fu_118 <= 16'd0;
    end else if (((icmp_ln1027_reg_798 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten_fu_118 <= add_ln1027_reg_802;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        jj_fu_110 <= 8'd0;
    end else if (((icmp_ln1027_reg_798 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        jj_fu_110 <= jj_1_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_1_fu_122 <= sum;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode == 2'd1))) begin
        sum_1_fu_122 <= select_ln44_reg_974;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode == 2'd2))) begin
        sum_1_fu_122 <= select_ln45_reg_969;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (mode == 2'd0))) begin
        sum_1_fu_122 <= sum_2_reg_979;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln1027_reg_802 <= add_ln1027_fu_289_p2;
        icmp_ln1027_reg_798 <= icmp_ln1027_fu_283_p2;
        icmp_ln1027_reg_798_pp0_iter1_reg <= icmp_ln1027_reg_798;
        icmp_ln1027_reg_798_pp0_iter2_reg <= icmp_ln1027_reg_798_pp0_iter1_reg;
        icmp_ln1027_reg_798_pp0_iter3_reg <= icmp_ln1027_reg_798_pp0_iter2_reg;
        rhs_V_1_cast_reg_790[15 : 0] <= rhs_V_1_cast_fu_256_p1[15 : 0];
        rhs_V_2_cast_reg_785[15 : 0] <= rhs_V_2_cast_fu_252_p1[15 : 0];
        zext_ln1495_cast_reg_778[15 : 0] <= zext_ln1495_cast_fu_248_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1027_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln36_1_reg_822 <= add_ln36_1_fu_315_p2;
        icmp_ln1027_1_reg_812 <= icmp_ln1027_1_fu_301_p2;
        ii_load_reg_807 <= ap_sig_allocacmp_ii_load;
        select_ln36_reg_817 <= select_ln36_fu_307_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (mode == 2'd1))) begin
        bitcast_ln44_reg_948 <= bitcast_ln44_fu_553_p1;
        icmp_ln44_2_reg_954 <= icmp_ln44_2_fu_557_p2;
        icmp_ln44_3_reg_959 <= icmp_ln44_3_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (mode == 2'd2))) begin
        bitcast_ln45_reg_932 <= bitcast_ln45_fu_539_p1;
        icmp_ln45_2_reg_938 <= icmp_ln45_2_fu_543_p2;
        icmp_ln45_3_reg_943 <= icmp_ln45_3_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (mode == 2'd1))) begin
        gmem_addr_1_read_reg_912 <= m_axi_gmem_RDATA;
        tmp_1_reg_917 <= {{m_axi_gmem_RDATA[30:23]}};
        trunc_ln44_1_reg_922 <= trunc_ln44_1_fu_535_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (mode == 2'd1))) begin
        gmem_addr_1_reg_885 <= sext_ln44_fu_460_p1;
        select_ln44_reg_974 <= select_ln44_fu_682_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (mode == 2'd2))) begin
        gmem_addr_2_read_reg_897 <= m_axi_gmem_RDATA;
        tmp_4_reg_902 <= {{m_axi_gmem_RDATA[30:23]}};
        trunc_ln45_1_reg_907 <= trunc_ln45_1_fu_521_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (mode == 2'd2))) begin
        gmem_addr_2_reg_879 <= sext_ln45_fu_419_p1;
        select_ln45_reg_969 <= select_ln45_fu_623_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (mode == 2'd0))) begin
        gmem_addr_read_reg_927 <= m_axi_gmem_RDATA;
        sum_2_reg_979 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (mode == 2'd0))) begin
        gmem_addr_reg_891 <= sext_ln43_fu_501_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_798 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode == 2'd1))) begin
        lhs_V_4_reg_852 <= grp_fu_712_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_798 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode == 2'd2))) begin
        lhs_V_5_reg_847 <= grp_fu_705_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln36_1_reg_872 <= grp_fu_361_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_798 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul_ln36_reg_862 <= grp_fu_726_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (mode == 2'd2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (mode == 2'd1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (mode == 2'd0)))) begin
        reg_242 <= grp_load_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_798 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode == 2'd0))) begin
        ret_V_8_reg_857 <= grp_fu_719_p3;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_798 == 1'd1) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln1027_reg_798_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter3_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_ii_load = 8'd0;
    end else begin
        ap_sig_allocacmp_ii_load = ii_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_jj_load = 8'd0;
    end else begin
        ap_sig_allocacmp_jj_load = jj_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (mode == 2'd0))) begin
        ap_sig_allocacmp_sum_1_load_1 = sum_2_reg_979;
    end else begin
        ap_sig_allocacmp_sum_1_load_1 = sum_1_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (mode == 2'd0))) begin
        ap_sig_allocacmp_sum_1_load_2 = sum_2_reg_979;
    end else begin
        ap_sig_allocacmp_sum_1_load_2 = sum_1_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (mode == 2'd0))) begin
        ap_sig_allocacmp_sum_1_load_3 = sum_2_reg_979;
    end else begin
        ap_sig_allocacmp_sum_1_load_3 = sum_1_fu_122;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode == 2'd2)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode == 2'd1)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode == 2'd0)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (mode == 2'd2)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (mode == 2'd1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (mode == 2'd0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_229_ce = 1'b1;
    end else begin
        grp_fu_229_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_233_ce = 1'b1;
    end else begin
        grp_fu_233_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_455)) begin
        if ((mode == 2'd1)) begin
            grp_fu_233_p1 = bitcast_ln44_fu_553_p1;
        end else if ((mode == 2'd2)) begin
            grp_fu_233_p1 = bitcast_ln45_fu_539_p1;
        end else begin
            grp_fu_233_p1 = 'bx;
        end
    end else begin
        grp_fu_233_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_383_ce = 1'b1;
    end else begin
        grp_fu_383_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_705_ce = 1'b1;
    end else begin
        grp_fu_705_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_712_ce = 1'b1;
    end else begin
        grp_fu_712_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_719_ce = 1'b1;
    end else begin
        grp_fu_719_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_726_ce = 1'b1;
    end else begin
        grp_fu_726_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_455)) begin
        if ((mode == 2'd0)) begin
            grp_load_fu_237_p1 = ap_sig_allocacmp_sum_1_load_1;
        end else if ((mode == 2'd1)) begin
            grp_load_fu_237_p1 = ap_sig_allocacmp_sum_1_load_2;
        end else if ((mode == 2'd2)) begin
            grp_load_fu_237_p1 = ap_sig_allocacmp_sum_1_load_3;
        end else begin
            grp_load_fu_237_p1 = 'bx;
        end
    end else begin
        grp_load_fu_237_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_398)) begin
        if ((mode == 2'd0)) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_891;
        end else if ((mode == 2'd1)) begin
            m_axi_gmem_ARADDR = gmem_addr_1_reg_885;
        end else if ((mode == 2'd2)) begin
            m_axi_gmem_ARADDR = gmem_addr_2_reg_879;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode == 2'd2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode == 2'd1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode == 2'd0)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (mode == 2'd2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (mode == 2'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (mode == 2'd0)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1027_reg_798_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_3_out_ap_vld = 1'b1;
    end else begin
        sum_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1027_fu_289_p2 = (ap_sig_allocacmp_indvar_flatten_load + 16'd1);

assign add_ln36_1_fu_315_p2 = (ap_sig_allocacmp_ii_load + 8'd1);

assign add_ln36_fu_352_p2 = (zext_ln36_fu_348_p1 + select_ln25_1);

assign add_ln43_fu_486_p2 = ($signed(sext_ln43_1_fu_482_p1) + $signed(feature_in));

assign add_ln44_fu_445_p2 = ($signed(sext_ln44_1_fu_441_p1) + $signed(feature_in));

assign add_ln45_fu_404_p2 = ($signed(sext_ln45_1_fu_400_p1) + $signed(feature_in));

assign and_ln44_1_fu_676_p2 = (or_ln44_1_fu_666_p2 & and_ln44_fu_670_p2);

assign and_ln44_fu_670_p2 = (or_ln44_fu_660_p2 & grp_fu_233_p2);

assign and_ln45_1_fu_617_p2 = (or_ln45_1_fu_607_p2 & and_ln45_fu_611_p2);

assign and_ln45_fu_611_p2 = (or_ln45_fu_601_p2 & grp_fu_233_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (((mode == 2'd2) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd0) & (m_axi_gmem_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (((mode == 2'd2) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd0) & (m_axi_gmem_RVALID == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state9_io));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state9_io));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp0_stage0_iter3 = (((mode == 2'd2) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd0) & (m_axi_gmem_RVALID == 1'b0)));
end

assign ap_block_state17_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = (((m_axi_gmem_ARREADY == 1'b0) & (mode == 2'd2)) | ((m_axi_gmem_ARREADY == 1'b0) & (mode == 2'd1)) | ((m_axi_gmem_ARREADY == 1'b0) & (mode == 2'd0)));
end

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_398 = ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_condition_455 = ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage4;

assign bitcast_ln44_1_fu_630_p1 = reg_242;

assign bitcast_ln44_fu_553_p1 = gmem_addr_1_read_reg_912;

assign bitcast_ln45_1_fu_571_p1 = reg_242;

assign bitcast_ln45_fu_539_p1 = gmem_addr_2_read_reg_897;

assign grp_fu_229_p1 = gmem_addr_read_reg_927;

assign grp_fu_361_p_ce = grp_fu_383_ce;

assign grp_fu_361_p_din0 = sext_ln36_1_fu_380_p1;

assign grp_fu_361_p_din1 = rhs_V_2_cast_reg_785;

assign grp_fu_705_p1 = rhs_V_1_cast_fu_256_p1;

assign grp_fu_705_p2 = zext_ln1495_cast_reg_778;

assign grp_fu_712_p1 = rhs_V_1_cast_fu_256_p1;

assign grp_fu_712_p2 = zext_ln1495_cast_reg_778;

assign grp_fu_719_p1 = rhs_V_1_cast_fu_256_p1;

assign grp_fu_719_p2 = zext_ln1495_cast_reg_778;

assign grp_fu_726_p1 = rhs_V_1_cast_reg_790;

assign icmp_ln1027_1_fu_301_p2 = ((ap_sig_allocacmp_jj_load == Kx) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_283_p2 = ((ap_sig_allocacmp_indvar_flatten_load == mul_i92) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_654_p2 = ((trunc_ln44_fu_644_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_2_fu_557_p2 = ((tmp_1_reg_917 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln44_3_fu_562_p2 = ((trunc_ln44_1_reg_922 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_648_p2 = ((tmp_fu_634_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln45_1_fu_595_p2 = ((trunc_ln45_fu_585_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln45_2_fu_543_p2 = ((tmp_4_reg_902 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln45_3_fu_548_p2 = ((trunc_ln45_1_reg_907 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_589_p2 = ((tmp_3_fu_575_p4 != 8'd255) ? 1'b1 : 1'b0);

assign jj_1_fu_370_p2 = (select_ln36_reg_817 + 8'd1);

assign lhs_V_fu_325_p2 = (zext_ln40_fu_321_p1 + mul_ln40);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln44_1_fu_666_p2 = (icmp_ln44_3_reg_959 | icmp_ln44_2_reg_954);

assign or_ln44_fu_660_p2 = (icmp_ln44_fu_648_p2 | icmp_ln44_1_fu_654_p2);

assign or_ln45_1_fu_607_p2 = (icmp_ln45_3_reg_943 | icmp_ln45_2_reg_938);

assign or_ln45_fu_601_p2 = (icmp_ln45_fu_589_p2 | icmp_ln45_1_fu_595_p2);

assign ret_V_3_fu_429_p2 = ($signed(lhs_V_4_reg_852) + $signed(mul_ln36_1_reg_872));

assign ret_V_6_fu_388_p2 = ($signed(lhs_V_5_reg_847) + $signed(mul_ln36_1_reg_872));

assign ret_V_fu_470_p2 = ($signed(ret_V_8_reg_857) + $signed(mul_ln36_1_reg_872));

assign rhs_V_1_cast_fu_256_p1 = rhs_V_1;

assign rhs_V_2_cast_fu_252_p1 = rhs_V_2;

assign select_ln36_1_fu_343_p3 = ((icmp_ln1027_1_reg_812[0:0] == 1'b1) ? add_ln36_1_reg_822 : ii_load_reg_807);

assign select_ln36_fu_307_p3 = ((icmp_ln1027_1_fu_301_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_jj_load);

assign select_ln44_fu_682_p3 = ((and_ln44_1_fu_676_p2[0:0] == 1'b1) ? bitcast_ln44_reg_948 : reg_242);

assign select_ln45_fu_623_p3 = ((and_ln45_1_fu_617_p2[0:0] == 1'b1) ? reg_242 : bitcast_ln45_reg_932);

assign sext_ln36_1_fu_380_p1 = mul_ln36_reg_862;

assign sext_ln43_1_fu_482_p1 = $signed(shl_ln1_fu_474_p3);

assign sext_ln43_fu_501_p1 = $signed(trunc_ln1_fu_491_p4);

assign sext_ln44_1_fu_441_p1 = $signed(shl_ln2_fu_433_p3);

assign sext_ln44_fu_460_p1 = $signed(trunc_ln2_fu_450_p4);

assign sext_ln45_1_fu_400_p1 = $signed(shl_ln3_fu_392_p3);

assign sext_ln45_fu_419_p1 = $signed(trunc_ln3_fu_409_p4);

assign shl_ln1_fu_474_p3 = {{ret_V_fu_470_p2}, {2'd0}};

assign shl_ln2_fu_433_p3 = {{ret_V_3_fu_429_p2}, {2'd0}};

assign shl_ln3_fu_392_p3 = {{ret_V_6_fu_388_p2}, {2'd0}};

assign sum_3_out = sum_1_fu_122;

assign tmp_3_fu_575_p4 = {{bitcast_ln45_1_fu_571_p1[30:23]}};

assign tmp_fu_634_p4 = {{bitcast_ln44_1_fu_630_p1[30:23]}};

assign trunc_ln1_fu_491_p4 = {{add_ln43_fu_486_p2[63:2]}};

assign trunc_ln2_fu_450_p4 = {{add_ln44_fu_445_p2[63:2]}};

assign trunc_ln3_fu_409_p4 = {{add_ln45_fu_404_p2[63:2]}};

assign trunc_ln44_1_fu_535_p1 = m_axi_gmem_RDATA[22:0];

assign trunc_ln44_fu_644_p1 = bitcast_ln44_1_fu_630_p1[22:0];

assign trunc_ln45_1_fu_521_p1 = m_axi_gmem_RDATA[22:0];

assign trunc_ln45_fu_585_p1 = bitcast_ln45_1_fu_571_p1[22:0];

assign zext_ln1495_cast_fu_248_p1 = zext_ln1495;

assign zext_ln36_fu_348_p1 = select_ln36_1_fu_343_p3;

assign zext_ln40_fu_321_p1 = select_ln36_fu_307_p3;

always @ (posedge ap_clk) begin
    zext_ln1495_cast_reg_778[47:16] <= 32'b00000000000000000000000000000000;
    rhs_V_2_cast_reg_785[47:16] <= 32'b00000000000000000000000000000000;
    rhs_V_1_cast_reg_790[31:16] <= 16'b0000000000000000;
end

endmodule //Pool_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5
