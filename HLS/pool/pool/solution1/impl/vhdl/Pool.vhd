-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Pool is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Pool_Pool,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4026,HLS_SYN_LUT=4668,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (58 downto 0) := "00000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (58 downto 0) := "00000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (58 downto 0) := "00000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (58 downto 0) := "00000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (58 downto 0) := "00000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (58 downto 0) := "00000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (58 downto 0) := "00001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (58 downto 0) := "00010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (58 downto 0) := "00100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (58 downto 0) := "01000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (58 downto 0) := "10000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_5BB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "01011011101100011010001010111100";
    constant ap_const_lv32_DBB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "11011011101100011010001010111100";
    constant ap_const_lv48_1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin : STD_LOGIC_VECTOR (15 downto 0);
    signal Win : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky : STD_LOGIC_VECTOR (7 downto 0);
    signal mode : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal feature_out_read_reg_672 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in_read_reg_677 : STD_LOGIC_VECTOR (63 downto 0);
    signal mode_read_reg_682 : STD_LOGIC_VECTOR (1 downto 0);
    signal Kx_read_reg_689 : STD_LOGIC_VECTOR (7 downto 0);
    signal Win_read_reg_694 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_read_reg_705 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1513_fu_240_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1513_reg_718 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1513_1_fu_250_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1513_1_reg_725 : STD_LOGIC_VECTOR (15 downto 0);
    signal cmp_i_i_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal mul_i92_fu_290_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i92_reg_740 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_12_reg_746 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln541_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln541_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln6_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal CHin_cast_fu_306_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal CHin_cast_reg_775 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal rhs_V_1_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_338_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln6_1_reg_802 : STD_LOGIC_VECTOR (47 downto 0);
    signal icmp_ln1027_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal zext_ln541_1_fu_358_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln541_reg_832 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln1027_3_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_3_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_2_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1495_4_fu_396_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1495_4_reg_852 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_433_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of i_4_fu_433_p2 : signal is "no";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal select_ln25_fu_443_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1495_1_fu_490_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1495_1_reg_880 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal select_ln25_1_fu_512_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln25_1_reg_890 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_mid1_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_625_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_reg_900 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_630_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_2_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_fu_521_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln541_1_reg_915 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal gmem_addr_reg_923 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal sum_3_fu_588_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_start : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_done : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_idle : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_ready : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_sum_3_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_sum_3_out_ap_vld : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_din0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_din1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_ce : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln51_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_fu_128 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_132 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1027_fu_454_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten9_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_1_fu_409_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_140 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten31_fu_144 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln1027_1_fu_374_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_237_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_244_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_i92_fu_290_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_i92_fu_290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal switch_selectcmp_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal switch_select_fu_326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_i_i_i753_cast_fu_354_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_361_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_361_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1027_4_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1027_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1495_fu_427_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1495_fu_427_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln25_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_609_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_614_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1495_2_fu_506_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_521_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_521_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1495_3_fu_526_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln51_fu_542_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln25_2_fu_532_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln51_1_fu_545_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln_fu_551_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln51_1_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln51_fu_563_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_568_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_598_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_598_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_604_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_604_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_609_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_614_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_620_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_620_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_625_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_630_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_630_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_630_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_233_ce : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_244_ap_start : STD_LOGIC;
    signal grp_fu_244_ap_done : STD_LOGIC;
    signal grp_fu_254_ap_start : STD_LOGIC;
    signal grp_fu_254_ap_done : STD_LOGIC;
    signal grp_fu_361_ce : STD_LOGIC;
    signal grp_fu_521_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal grp_fu_244_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_254_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_312_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_312_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_521_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_598_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_598_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_604_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_620_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_630_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_630_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Pool_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        mul_i92 : IN STD_LOGIC_VECTOR (15 downto 0);
        Kx : IN STD_LOGIC_VECTOR (7 downto 0);
        select_ln25_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        rhs_V_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        rhs_V_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        mul_ln40 : IN STD_LOGIC_VECTOR (15 downto 0);
        mode : IN STD_LOGIC_VECTOR (1 downto 0);
        zext_ln1495 : IN STD_LOGIC_VECTOR (15 downto 0);
        feature_in : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_3_out_ap_vld : OUT STD_LOGIC;
        grp_fu_361_p_din0 : OUT STD_LOGIC_VECTOR (32 downto 0);
        grp_fu_361_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        grp_fu_361_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
        grp_fu_361_p_ce : OUT STD_LOGIC );
    end component;


    component Pool_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_uitofp_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_udiv_16ns_8ns_16_20_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Pool_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Pool_mul_16ns_32ns_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Pool_mul_32s_16ns_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Pool_mul_32ns_16ns_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Pool_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_mul_mul_16ns_8ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Pool_mac_muladd_16ns_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        CHin : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode : OUT STD_LOGIC_VECTOR (1 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component Pool_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216 : component Pool_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_start,
        ap_done => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_done,
        ap_idle => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_idle,
        ap_ready => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_ready,
        sum => sum_reg_797,
        m_axi_gmem_AWVALID => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        mul_i92 => mul_i92_reg_740,
        Kx => Kx_read_reg_689,
        select_ln25_1 => select_ln25_1_reg_890,
        rhs_V_1 => CHin_read_reg_705,
        rhs_V_2 => Win_read_reg_694,
        mul_ln40 => mul_ln40_reg_900,
        mode => mode_read_reg_682,
        zext_ln1495 => select_ln1495_1_reg_880,
        feature_in => feature_in_read_reg_677,
        sum_3_out => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_sum_3_out,
        sum_3_out_ap_vld => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_sum_3_out_ap_vld,
        grp_fu_361_p_din0 => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_din0,
        grp_fu_361_p_din1 => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_din1,
        grp_fu_361_p_dout0 => grp_fu_361_p2,
        grp_fu_361_p_ce => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_ce);

    control_s_axi_U : component Pool_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        CHin => CHin,
        Hin => Hin,
        Win => Win,
        Kx => Kx,
        Ky => Ky,
        mode => mode,
        feature_in => feature_in,
        feature_out => feature_out,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component Pool_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARADDR,
        I_ARLEN => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_923,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    fdiv_32ns_32ns_32_16_no_dsp_1_U24 : component Pool_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_sum_3_out,
        din1 => conv_i_reg_792,
        ce => grp_fu_233_ce,
        dout => grp_fu_233_p2);

    uitofp_32ns_32_6_no_dsp_1_U25 : component Pool_uitofp_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_237_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p1);

    udiv_16ns_8ns_16_20_seq_1_U26 : component Pool_udiv_16ns_8ns_16_20_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_244_ap_start,
        done => grp_fu_244_ap_done,
        din0 => Win,
        din1 => grp_fu_244_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_244_p2);

    udiv_16ns_8ns_16_20_seq_1_U27 : component Pool_udiv_16ns_8ns_16_20_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_254_ap_start,
        done => grp_fu_254_ap_done,
        din0 => Hin,
        din1 => grp_fu_254_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_254_p2);

    mul_8ns_8ns_16_1_1_U28 : component Pool_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_i92_fu_290_p0,
        din1 => mul_i92_fu_290_p1,
        dout => mul_i92_fu_290_p2);

    mul_16ns_32ns_48_2_1_U29 : component Pool_mul_16ns_32ns_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_312_p0,
        din1 => grp_fu_312_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_312_p2);

    mul_32s_16ns_48_2_1_U30 : component Pool_mul_32s_16ns_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 33,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_361_p0,
        din1 => grp_fu_361_p1,
        ce => grp_fu_361_ce,
        dout => grp_fu_361_p2);

    mul_32ns_16ns_48_2_1_U31 : component Pool_mul_32ns_16ns_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_521_p0,
        din1 => grp_fu_521_p1,
        ce => grp_fu_521_ce,
        dout => grp_fu_521_p2);

    mul_mul_16ns_16ns_32_4_1_U32 : component Pool_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_598_p0,
        din1 => grp_fu_598_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_598_p2);

    mul_mul_16ns_16ns_32_4_1_U33 : component Pool_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_604_p0,
        din1 => grp_fu_604_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_604_p2);

    mul_mul_16ns_8ns_16_4_1_U34 : component Pool_mul_mul_16ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_fu_132,
        din1 => grp_fu_609_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_609_p2);

    mul_mul_16ns_8ns_16_4_1_U35 : component Pool_mul_mul_16ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_4_fu_433_p2,
        din1 => grp_fu_614_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_614_p2);

    mul_mul_16ns_16ns_32_4_1_U36 : component Pool_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_620_p0,
        din1 => grp_fu_620_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_620_p2);

    mul_mul_16ns_8ns_16_4_1_U37 : component Pool_mul_mul_16ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln25_fu_443_p3,
        din1 => grp_fu_625_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_625_p2);

    mac_muladd_16ns_16ns_16ns_32_4_1_U38 : component Pool_mac_muladd_16ns_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_630_p0,
        din1 => grp_fu_630_p1,
        din2 => grp_fu_630_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_630_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_ready = ap_const_logic_1)) then 
                    grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_fu_140 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                c_fu_140 <= select_ln1495_1_fu_490_p3;
            end if; 
        end if;
    end process;

    i_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_132 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_fu_132 <= select_ln1027_fu_454_p3;
            end if; 
        end if;
    end process;

    indvar_flatten31_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten31_fu_144 <= ap_const_lv48_0;
            elsif (((icmp_ln1027_2_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                indvar_flatten31_fu_144 <= add_ln1027_1_fu_374_p2;
            end if; 
        end if;
    end process;

    indvar_flatten9_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten9_fu_136 <= ap_const_lv32_0;
            elsif (((icmp_ln1027_2_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                indvar_flatten9_fu_136 <= select_ln1027_1_fu_409_p3;
            end if; 
        end if;
    end process;

    lhs_V_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lhs_V_fu_128 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                lhs_V_fu_128 <= j_fu_465_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                    CHin_cast_reg_775(15 downto 0) <= CHin_cast_fu_306_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                CHin_read_reg_705 <= CHin;
                Kx_read_reg_689 <= Kx;
                Win_read_reg_694 <= Win;
                feature_in_read_reg_677 <= feature_in;
                feature_out_read_reg_672 <= feature_out;
                mode_read_reg_682 <= mode;
                    zext_ln1513_1_reg_725(7 downto 0) <= zext_ln1513_1_fu_250_p1(7 downto 0);
                    zext_ln1513_reg_718(7 downto 0) <= zext_ln1513_fu_240_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                add_ln51_2_reg_905 <= grp_fu_630_p3;
                mul_ln40_reg_900 <= grp_fu_625_p2;
                select_ln25_1_reg_890 <= select_ln25_1_fu_512_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                cmp_i_i_reg_733 <= cmp_i_i_fu_285_p2;
                mul_i92_reg_740 <= mul_i92_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (cmp_i_i_reg_733 = ap_const_lv1_1))) then
                conv_i_reg_792 <= grp_fu_237_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                gmem_addr_reg_923 <= sext_ln51_fu_578_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_2_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                icmp_ln1027_3_reg_843 <= icmp_ln1027_3_fu_386_p2;
                select_ln1495_4_reg_852 <= select_ln1495_4_fu_396_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                icmp_ln1027_reg_807 <= icmp_ln1027_fu_346_p2;
                mul_ln6_1_reg_802 <= grp_fu_312_p2;
                    rhs_V_1_reg_787(15 downto 0) <= rhs_V_1_fu_318_p1(15 downto 0);
                    sum_reg_797(5 downto 2) <= sum_fu_338_p3(5 downto 2);    sum_reg_797(7) <= sum_fu_338_p3(7);    sum_reg_797(9) <= sum_fu_338_p3(9);    sum_reg_797(13) <= sum_fu_338_p3(13);    sum_reg_797(16 downto 15) <= sum_fu_338_p3(16 downto 15);    sum_reg_797(21 downto 20) <= sum_fu_338_p3(21 downto 20);    sum_reg_797(25 downto 23) <= sum_fu_338_p3(25 downto 23);    sum_reg_797(28 downto 27) <= sum_fu_338_p3(28 downto 27);    sum_reg_797(31 downto 30) <= sum_fu_338_p3(31 downto 30);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln1495_4_reg_852 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                mul_ln541_1_reg_915 <= grp_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                mul_ln541_reg_832 <= grp_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                mul_ln6_reg_769 <= grp_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                ret_V_12_reg_746 <= grp_fu_244_p2;
                    zext_ln541_reg_757(15 downto 0) <= zext_ln541_fu_298_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln1495_4_reg_852 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                ret_V_mid1_reg_895 <= grp_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                ret_V_reg_822 <= grp_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                select_ln1495_1_reg_880 <= select_ln1495_1_fu_490_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                sum_3_reg_929 <= sum_3_fu_588_p3;
            end if;
        end if;
    end process;
    zext_ln1513_reg_718(15 downto 8) <= "00000000";
    zext_ln1513_1_reg_725(15 downto 8) <= "00000000";
    zext_ln541_reg_757(31 downto 16) <= "0000000000000000";
    CHin_cast_reg_775(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_1_reg_787(31 downto 16) <= "0000000000000000";
    sum_reg_797(1 downto 0) <= "00";
    sum_reg_797(6 downto 6) <= "0";
    sum_reg_797(8 downto 8) <= "0";
    sum_reg_797(12 downto 10) <= "000";
    sum_reg_797(14 downto 14) <= "0";
    sum_reg_797(19 downto 17) <= "000";
    sum_reg_797(22 downto 22) <= "0";
    sum_reg_797(26 downto 26) <= "0";
    sum_reg_797(29) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state39, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state31, icmp_ln1027_2_fu_369_p2, ap_CS_fsm_state37, grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_done, gmem_AWREADY, gmem_WREADY, gmem_BVALID)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((icmp_ln1027_2_fu_369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    CHin_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_read_reg_705),48));
    add_ln1027_1_fu_374_p2 <= std_logic_vector(unsigned(indvar_flatten31_fu_144) + unsigned(ap_const_lv48_1));
    add_ln1027_fu_403_p2 <= std_logic_vector(unsigned(indvar_flatten9_fu_136) + unsigned(ap_const_lv32_1));
    add_ln24_fu_484_p2 <= std_logic_vector(unsigned(c_fu_140) + unsigned(ap_const_lv16_1));
    add_ln51_1_fu_545_p2 <= std_logic_vector(unsigned(zext_ln51_fu_542_p1) + unsigned(select_ln25_2_fu_532_p3));
    add_ln51_fu_563_p2 <= std_logic_vector(unsigned(zext_ln51_1_fu_559_p1) + unsigned(feature_out_read_reg_672));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;

    ap_ST_fsm_state37_blk_assign_proc : process(grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_done)
    begin
        if ((grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state38_blk <= ap_const_logic_0;

    ap_ST_fsm_state39_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;

    ap_ST_fsm_state54_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state54_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state54_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;

    ap_ST_fsm_state59_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state59_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state59_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state31, icmp_ln1027_2_fu_369_p2)
    begin
        if (((icmp_ln1027_2_fu_369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state31, icmp_ln1027_2_fu_369_p2)
    begin
        if (((icmp_ln1027_2_fu_369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmp_i_i_fu_285_p2 <= "1" when (mode_read_reg_682 = ap_const_lv2_0) else "0";
    conv3_i_i_i753_cast_fu_354_p0 <= i_fu_132;
    empty_fu_333_p2 <= (switch_selectcmp_fu_321_p2 or cmp_i_i_reg_733);

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            gmem_ARVALID <= grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state39, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state59, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_RREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            gmem_RREADY <= grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem_WDATA <= sum_3_reg_929;

    gmem_WVALID_assign_proc : process(ap_CS_fsm_state54, gmem_WREADY)
    begin
        if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_start <= grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_start_reg;

    grp_fu_233_ce_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_state38, ap_CS_fsm_state53, gmem_AWREADY, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            grp_fu_233_ce <= ap_const_logic_1;
        else 
            grp_fu_233_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_237_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_i92_reg_740),32));

    grp_fu_244_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_244_ap_start <= ap_const_logic_1;
        else 
            grp_fu_244_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_244_p1 <= grp_fu_244_p10(8 - 1 downto 0);
    grp_fu_244_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx),16));

    grp_fu_254_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_254_ap_start <= ap_const_logic_1;
        else 
            grp_fu_254_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_254_p1 <= grp_fu_254_p10(8 - 1 downto 0);
    grp_fu_254_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky),16));
    grp_fu_312_p0 <= grp_fu_312_p00(16 - 1 downto 0);
    grp_fu_312_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_read_reg_705),48));
    grp_fu_312_p1 <= grp_fu_312_p10(32 - 1 downto 0);
    grp_fu_312_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln6_reg_769),48));

    grp_fu_361_ce_assign_proc : process(ap_CS_fsm_state37, grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_361_ce <= grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_ce;
        else 
            grp_fu_361_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_361_p0_assign_proc : process(zext_ln541_1_fu_358_p1, ap_CS_fsm_state30, ap_CS_fsm_state37, grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_din0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_361_p0 <= grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_361_p0 <= zext_ln541_1_fu_358_p1(33 - 1 downto 0);
        else 
            grp_fu_361_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_361_p1_assign_proc : process(CHin_cast_reg_775, ap_CS_fsm_state30, ap_CS_fsm_state37, grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_din1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_361_p1 <= grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_grp_fu_361_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_361_p1 <= CHin_cast_reg_775(16 - 1 downto 0);
        else 
            grp_fu_361_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_521_ce_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state37, grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or ((grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            grp_fu_521_ce <= ap_const_logic_1;
        else 
            grp_fu_521_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_521_p0 <= grp_fu_521_p00(32 - 1 downto 0);
    grp_fu_521_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_mid1_reg_895),48));
    grp_fu_521_p1 <= CHin_cast_reg_775(16 - 1 downto 0);
    grp_fu_598_p0 <= grp_fu_598_p00(16 - 1 downto 0);
    grp_fu_598_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_254_p2),32));
    grp_fu_598_p1 <= grp_fu_598_p10(16 - 1 downto 0);
    grp_fu_598_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_244_p2),32));
    grp_fu_604_p0 <= grp_fu_604_p00(16 - 1 downto 0);
    grp_fu_604_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv3_i_i_i753_cast_fu_354_p0),32));
    grp_fu_604_p1 <= zext_ln541_reg_757(16 - 1 downto 0);
    grp_fu_609_p1 <= zext_ln1513_1_reg_725(8 - 1 downto 0);
    grp_fu_614_p1 <= zext_ln1513_1_reg_725(8 - 1 downto 0);
    grp_fu_620_p0 <= grp_fu_620_p00(16 - 1 downto 0);
    grp_fu_620_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_433_p2),32));
    grp_fu_620_p1 <= zext_ln541_reg_757(16 - 1 downto 0);
    grp_fu_625_p1 <= zext_ln1513_reg_718(8 - 1 downto 0);
    grp_fu_630_p0 <= grp_fu_630_p00(16 - 1 downto 0);
    grp_fu_630_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_fu_443_p3),32));
    grp_fu_630_p1 <= rhs_V_1_reg_787(16 - 1 downto 0);
    grp_fu_630_p2 <= grp_fu_630_p20(16 - 1 downto 0);
    grp_fu_630_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1495_1_fu_490_p3),32));
    i_4_fu_433_p2 <= std_logic_vector(unsigned(select_ln1495_fu_427_p3) + unsigned(ap_const_lv16_1));
    icmp_ln1027_2_fu_369_p2 <= "1" when (indvar_flatten31_fu_144 = mul_ln6_1_reg_802) else "0";
    icmp_ln1027_3_fu_386_p2 <= "1" when (indvar_flatten9_fu_136 = mul_ln6_reg_769) else "0";
    icmp_ln1027_4_fu_391_p2 <= "1" when (lhs_V_fu_128 = ret_V_12_reg_746) else "0";
    icmp_ln1027_fu_346_p2 <= "1" when (ret_V_12_reg_746 = ap_const_lv16_0) else "0";
    j_fu_465_p2 <= std_logic_vector(unsigned(select_ln25_fu_443_p3) + unsigned(ap_const_lv16_1));
    mul_i92_fu_290_p0 <= zext_ln1513_1_reg_725(8 - 1 downto 0);
    mul_i92_fu_290_p1 <= zext_ln1513_reg_718(8 - 1 downto 0);
    or_ln25_fu_439_p2 <= (select_ln1495_4_reg_852 or icmp_ln1027_3_reg_843);
    rhs_V_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_read_reg_705),32));
    select_ln1027_1_fu_409_p3 <= 
        ap_const_lv32_1 when (icmp_ln1027_3_fu_386_p2(0) = '1') else 
        add_ln1027_fu_403_p2;
    select_ln1027_fu_454_p3 <= 
        i_4_fu_433_p2 when (select_ln1495_4_reg_852(0) = '1') else 
        select_ln1495_fu_427_p3;
    select_ln1495_1_fu_490_p3 <= 
        add_ln24_fu_484_p2 when (icmp_ln1027_3_reg_843(0) = '1') else 
        c_fu_140;
    select_ln1495_2_fu_506_p3 <= 
        ap_const_lv16_0 when (icmp_ln1027_3_reg_843(0) = '1') else 
        grp_fu_609_p2;
    select_ln1495_3_fu_526_p3 <= 
        ap_const_lv48_0 when (icmp_ln1027_3_reg_843(0) = '1') else 
        mul_ln541_reg_832;
    select_ln1495_4_fu_396_p3 <= 
        icmp_ln1027_reg_807 when (icmp_ln1027_3_fu_386_p2(0) = '1') else 
        icmp_ln1027_4_fu_391_p2;
    select_ln1495_fu_427_p2 <= i_fu_132;
    select_ln1495_fu_427_p3 <= 
        ap_const_lv16_0 when (icmp_ln1027_3_reg_843(0) = '1') else 
        select_ln1495_fu_427_p2;
    select_ln25_1_fu_512_p3 <= 
        grp_fu_614_p2 when (select_ln1495_4_reg_852(0) = '1') else 
        select_ln1495_2_fu_506_p3;
    select_ln25_2_fu_532_p3 <= 
        mul_ln541_1_reg_915 when (select_ln1495_4_reg_852(0) = '1') else 
        select_ln1495_3_fu_526_p3;
    select_ln25_fu_443_p3 <= 
        ap_const_lv16_0 when (or_ln25_fu_439_p2(0) = '1') else 
        lhs_V_fu_128;
        sext_ln51_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_568_p4),64));

    shl_ln_fu_551_p3 <= (add_ln51_1_fu_545_p2 & ap_const_lv2_0);
    sum_3_fu_588_p3 <= 
        grp_fu_233_p2 when (cmp_i_i_reg_733(0) = '1') else 
        grp_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5_fu_216_sum_3_out;
    sum_fu_338_p3 <= 
        switch_select_fu_326_p3 when (empty_fu_333_p2(0) = '1') else 
        ap_const_lv32_DBB1A2BC;
    switch_select_fu_326_p3 <= 
        ap_const_lv32_0 when (cmp_i_i_reg_733(0) = '1') else 
        ap_const_lv32_5BB1A2BC;
    switch_selectcmp_fu_321_p2 <= "1" when (mode_read_reg_682 = ap_const_lv2_1) else "0";
    trunc_ln_fu_568_p4 <= add_ln51_fu_563_p2(63 downto 2);
    zext_ln1513_1_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky),16));
    zext_ln1513_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx),16));
    zext_ln51_1_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_551_p3),64));
    zext_ln51_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_2_reg_905),48));
    zext_ln541_1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_822),48));
    zext_ln541_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_244_p2),32));
end behav;
