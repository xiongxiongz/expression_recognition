-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Pool_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sum : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mul_i92 : IN STD_LOGIC_VECTOR (15 downto 0);
    Kx : IN STD_LOGIC_VECTOR (7 downto 0);
    select_ln25_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    rhs_V_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    rhs_V_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    mul_ln40 : IN STD_LOGIC_VECTOR (15 downto 0);
    mode : IN STD_LOGIC_VECTOR (1 downto 0);
    zext_ln1495 : IN STD_LOGIC_VECTOR (15 downto 0);
    feature_in : IN STD_LOGIC_VECTOR (63 downto 0);
    sum_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_3_out_ap_vld : OUT STD_LOGIC;
    grp_fu_361_p_din0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    grp_fu_361_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_361_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_361_p_ce : OUT STD_LOGIC );
end;


architecture behav of Pool_Pool_Pipeline_VITIS_LOOP_36_4_VITIS_LOOP_37_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal icmp_ln1027_reg_798 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_load_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln1495_cast_fu_248_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1495_cast_reg_778 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_cast_fu_252_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_cast_reg_785 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_1_cast_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_cast_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1027_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_798_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_798_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_798_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1027_fu_289_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1027_reg_802 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_load_reg_807 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1027_1_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_307_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln36_reg_817 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_1_fu_315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_1_reg_822 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_705_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal lhs_V_5_reg_847 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_712_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal lhs_V_4_reg_852 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_719_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_8_reg_857 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_726_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln36_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal sext_ln36_1_fu_380_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln36_1_reg_872 : STD_LOGIC_VECTOR (47 downto 0);
    signal gmem_addr_2_reg_879 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal gmem_addr_1_reg_885 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_891 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_read_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_1_fu_521_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln45_1_reg_907 : STD_LOGIC_VECTOR (22 downto 0);
    signal gmem_addr_1_read_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_917 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln44_1_fu_535_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln44_1_reg_922 : STD_LOGIC_VECTOR (22 downto 0);
    signal gmem_addr_read_reg_927 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln45_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln45_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_2_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_2_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_3_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_3_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln44_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln44_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln44_2_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_2_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_3_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_3_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_fu_623_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln45_reg_969 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_fu_682_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_reg_974 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_979 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal sext_ln45_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal sext_ln44_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal jj_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_1_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_jj_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln36_1_fu_343_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_ii_load : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_118 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_1_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sum_1_load_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_sig_allocacmp_sum_1_load_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sum_1_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln40_fu_321_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_325_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln36_fu_348_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln36_fu_352_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ret_V_6_fu_388_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_6_fu_388_p2 : signal is "no";
    signal shl_ln3_fu_392_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln45_1_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln45_fu_404_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_409_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ret_V_3_fu_429_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of ret_V_3_fu_429_p2 : signal is "no";
    signal shl_ln2_fu_433_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln44_1_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln44_fu_445_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_450_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ret_V_fu_470_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of ret_V_fu_470_p2 : signal is "no";
    signal shl_ln1_fu_474_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln43_1_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln43_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_491_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln45_1_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_575_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln45_fu_585_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln45_1_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln45_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_1_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln45_1_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln44_1_fu_630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_634_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln44_fu_644_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln44_1_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_1_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_1_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_705_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_705_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_712_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_712_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_719_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_719_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_726_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_229_ce : STD_LOGIC;
    signal grp_fu_233_ce : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_383_ce : STD_LOGIC;
    signal grp_fu_705_ce : STD_LOGIC;
    signal grp_fu_712_ce : STD_LOGIC;
    signal grp_fu_719_ce : STD_LOGIC;
    signal grp_fu_726_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter3_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_455 : BOOLEAN;
    signal ap_condition_398 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component Pool_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Pool_mul_32s_16ns_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Pool_mac_muladd_16s_16ns_16ns_48_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Pool_mul_mul_16s_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component Pool_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_load_fu_237_p1,
        din1 => grp_fu_229_p1,
        ce => grp_fu_229_ce,
        dout => grp_fu_229_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U2 : component Pool_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_load_fu_237_p1,
        din1 => grp_fu_233_p1,
        ce => grp_fu_233_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_233_p2);

    mac_muladd_16s_16ns_16ns_48_4_1_U4 : component Pool_mac_muladd_16s_16ns_16ns_48_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => lhs_V_fu_325_p2,
        din1 => grp_fu_705_p1,
        din2 => grp_fu_705_p2,
        ce => grp_fu_705_ce,
        dout => grp_fu_705_p3);

    mac_muladd_16s_16ns_16ns_48_4_1_U5 : component Pool_mac_muladd_16s_16ns_16ns_48_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => lhs_V_fu_325_p2,
        din1 => grp_fu_712_p1,
        din2 => grp_fu_712_p2,
        ce => grp_fu_712_ce,
        dout => grp_fu_712_p3);

    mac_muladd_16s_16ns_16ns_48_4_1_U6 : component Pool_mac_muladd_16s_16ns_16ns_48_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => lhs_V_fu_325_p2,
        din1 => grp_fu_719_p1,
        din2 => grp_fu_719_p2,
        ce => grp_fu_719_ce,
        dout => grp_fu_719_p3);

    mul_mul_16s_16ns_32_4_1_U7 : component Pool_mul_mul_16s_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln36_fu_352_p2,
        din1 => grp_fu_726_p1,
        ce => grp_fu_726_ce,
        dout => grp_fu_726_p2);

    flow_control_loop_pipe_sequential_init_U : component Pool_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ii_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ii_fu_114 <= ap_const_lv8_0;
            elsif (((icmp_ln1027_reg_798 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ii_fu_114 <= select_ln36_1_fu_343_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_fu_118 <= ap_const_lv16_0;
            elsif (((icmp_ln1027_reg_798 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten_fu_118 <= add_ln1027_reg_802;
            end if; 
        end if;
    end process;

    jj_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                jj_fu_110 <= ap_const_lv8_0;
            elsif (((icmp_ln1027_reg_798 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                jj_fu_110 <= jj_1_fu_370_p2;
            end if; 
        end if;
    end process;

    sum_1_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sum_1_fu_122 <= sum;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (mode = ap_const_lv2_1))) then 
                sum_1_fu_122 <= select_ln44_reg_974;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (mode = ap_const_lv2_2))) then 
                sum_1_fu_122 <= select_ln45_reg_969;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv2_0))) then 
                sum_1_fu_122 <= sum_2_reg_979;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1027_reg_802 <= add_ln1027_fu_289_p2;
                icmp_ln1027_reg_798 <= icmp_ln1027_fu_283_p2;
                icmp_ln1027_reg_798_pp0_iter1_reg <= icmp_ln1027_reg_798;
                icmp_ln1027_reg_798_pp0_iter2_reg <= icmp_ln1027_reg_798_pp0_iter1_reg;
                icmp_ln1027_reg_798_pp0_iter3_reg <= icmp_ln1027_reg_798_pp0_iter2_reg;
                    rhs_V_1_cast_reg_790(15 downto 0) <= rhs_V_1_cast_fu_256_p1(15 downto 0);
                    rhs_V_2_cast_reg_785(15 downto 0) <= rhs_V_2_cast_fu_252_p1(15 downto 0);
                    zext_ln1495_cast_reg_778(15 downto 0) <= zext_ln1495_cast_fu_248_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1027_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln36_1_reg_822 <= add_ln36_1_fu_315_p2;
                icmp_ln1027_1_reg_812 <= icmp_ln1027_1_fu_301_p2;
                ii_load_reg_807 <= ap_sig_allocacmp_ii_load;
                select_ln36_reg_817 <= select_ln36_fu_307_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv2_1))) then
                bitcast_ln44_reg_948 <= bitcast_ln44_fu_553_p1;
                icmp_ln44_2_reg_954 <= icmp_ln44_2_fu_557_p2;
                icmp_ln44_3_reg_959 <= icmp_ln44_3_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv2_2))) then
                bitcast_ln45_reg_932 <= bitcast_ln45_fu_539_p1;
                icmp_ln45_2_reg_938 <= icmp_ln45_2_fu_543_p2;
                icmp_ln45_3_reg_943 <= icmp_ln45_3_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv2_1))) then
                gmem_addr_1_read_reg_912 <= m_axi_gmem_RDATA;
                tmp_1_reg_917 <= m_axi_gmem_RDATA(30 downto 23);
                trunc_ln44_1_reg_922 <= trunc_ln44_1_fu_535_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (mode = ap_const_lv2_1))) then
                gmem_addr_1_reg_885 <= sext_ln44_fu_460_p1;
                select_ln44_reg_974 <= select_ln44_fu_682_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv2_2))) then
                gmem_addr_2_read_reg_897 <= m_axi_gmem_RDATA;
                tmp_4_reg_902 <= m_axi_gmem_RDATA(30 downto 23);
                trunc_ln45_1_reg_907 <= trunc_ln45_1_fu_521_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (mode = ap_const_lv2_2))) then
                gmem_addr_2_reg_879 <= sext_ln45_fu_419_p1;
                select_ln45_reg_969 <= select_ln45_fu_623_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv2_0))) then
                gmem_addr_read_reg_927 <= m_axi_gmem_RDATA;
                sum_2_reg_979 <= grp_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (mode = ap_const_lv2_0))) then
                gmem_addr_reg_891 <= sext_ln43_fu_501_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_798 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (mode = ap_const_lv2_1))) then
                lhs_V_4_reg_852 <= grp_fu_712_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_798 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (mode = ap_const_lv2_2))) then
                lhs_V_5_reg_847 <= grp_fu_705_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln36_1_reg_872 <= grp_fu_361_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_798 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul_ln36_reg_862 <= grp_fu_726_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv2_2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv2_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv2_0)))) then
                reg_242 <= grp_load_fu_237_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_798 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (mode = ap_const_lv2_0))) then
                ret_V_8_reg_857 <= grp_fu_719_p3;
            end if;
        end if;
    end process;
    zext_ln1495_cast_reg_778(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_2_cast_reg_785(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_1_cast_reg_790(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter3_stage1, ap_idle_pp0_0to2, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_done_pending_pp0, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln1027_fu_289_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv16_1));
    add_ln36_1_fu_315_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ii_load) + unsigned(ap_const_lv8_1));
    add_ln36_fu_352_p2 <= std_logic_vector(unsigned(zext_ln36_fu_348_p1) + unsigned(select_ln25_1));
    add_ln43_fu_486_p2 <= std_logic_vector(signed(sext_ln43_1_fu_482_p1) + signed(feature_in));
    add_ln44_fu_445_p2 <= std_logic_vector(signed(sext_ln44_1_fu_441_p1) + signed(feature_in));
    add_ln45_fu_404_p2 <= std_logic_vector(signed(sext_ln45_1_fu_400_p1) + signed(feature_in));
    and_ln44_1_fu_676_p2 <= (or_ln44_1_fu_666_p2 and and_ln44_fu_670_p2);
    and_ln44_fu_670_p2 <= (or_ln44_fu_660_p2 and grp_fu_233_p2);
    and_ln45_1_fu_617_p2 <= (or_ln45_1_fu_607_p2 and and_ln45_fu_611_p2);
    and_ln45_fu_611_p2 <= (or_ln45_fu_601_p2 and grp_fu_233_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem_RVALID, mode)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (((mode = ap_const_lv2_2) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((mode = ap_const_lv2_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((mode = ap_const_lv2_0) and (m_axi_gmem_RVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem_RVALID, mode)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (((mode = ap_const_lv2_2) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((mode = ap_const_lv2_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((mode = ap_const_lv2_0) and (m_axi_gmem_RVALID = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state9_io)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_io));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state9_io)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_io));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_pp0_stage0_iter3_assign_proc : process(m_axi_gmem_RVALID, mode)
    begin
                ap_block_state16_pp0_stage0_iter3 <= (((mode = ap_const_lv2_2) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((mode = ap_const_lv2_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((mode = ap_const_lv2_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;

        ap_block_state17_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(m_axi_gmem_ARREADY, mode)
    begin
                ap_block_state9_io <= (((m_axi_gmem_ARREADY = ap_const_logic_0) and (mode = ap_const_lv2_2)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (mode = ap_const_lv2_1)) or ((m_axi_gmem_ARREADY = ap_const_logic_0) and (mode = ap_const_lv2_0)));
    end process;

        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_398_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
                ap_condition_398 <= ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_condition_455_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
                ap_condition_455 <= ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, icmp_ln1027_reg_798)
    begin
        if (((icmp_ln1027_reg_798 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, icmp_ln1027_reg_798_pp0_iter3_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_798_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter3_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_ii_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, ii_fu_114)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_ii_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_ii_load <= ii_fu_114;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_118)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_jj_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, jj_fu_110, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_jj_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_jj_load <= jj_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_sum_1_load_1_assign_proc : process(ap_enable_reg_pp0_iter4, mode, ap_CS_fsm_pp0_stage1, sum_2_reg_979, sum_1_fu_122, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv2_0))) then 
            ap_sig_allocacmp_sum_1_load_1 <= sum_2_reg_979;
        else 
            ap_sig_allocacmp_sum_1_load_1 <= sum_1_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_sum_1_load_2_assign_proc : process(ap_enable_reg_pp0_iter4, mode, ap_CS_fsm_pp0_stage1, sum_2_reg_979, sum_1_fu_122, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv2_0))) then 
            ap_sig_allocacmp_sum_1_load_2 <= sum_2_reg_979;
        else 
            ap_sig_allocacmp_sum_1_load_2 <= sum_1_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_sum_1_load_3_assign_proc : process(ap_enable_reg_pp0_iter4, mode, ap_CS_fsm_pp0_stage1, sum_2_reg_979, sum_1_fu_122, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (mode = ap_const_lv2_0))) then 
            ap_sig_allocacmp_sum_1_load_3 <= sum_2_reg_979;
        else 
            ap_sig_allocacmp_sum_1_load_3 <= sum_1_fu_122;
        end if; 
    end process;

    bitcast_ln44_1_fu_630_p1 <= reg_242;
    bitcast_ln44_fu_553_p1 <= gmem_addr_1_read_reg_912;
    bitcast_ln45_1_fu_571_p1 <= reg_242;
    bitcast_ln45_fu_539_p1 <= gmem_addr_2_read_reg_897;

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_ARREADY, mode, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (mode = ap_const_lv2_2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (mode = ap_const_lv2_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (mode = ap_const_lv2_0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, m_axi_gmem_RVALID, mode, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv2_2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv2_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv2_0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_229_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_229_ce <= ap_const_logic_1;
        else 
            grp_fu_229_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_229_p1 <= gmem_addr_read_reg_927;

    grp_fu_233_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_233_ce <= ap_const_logic_1;
        else 
            grp_fu_233_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_233_p1_assign_proc : process(mode, bitcast_ln45_fu_539_p1, bitcast_ln44_fu_553_p1, ap_condition_455)
    begin
        if ((ap_const_boolean_1 = ap_condition_455)) then
            if ((mode = ap_const_lv2_1)) then 
                grp_fu_233_p1 <= bitcast_ln44_fu_553_p1;
            elsif ((mode = ap_const_lv2_2)) then 
                grp_fu_233_p1 <= bitcast_ln45_fu_539_p1;
            else 
                grp_fu_233_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_233_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_361_p_ce <= grp_fu_383_ce;
    grp_fu_361_p_din0 <= sext_ln36_1_fu_380_p1(33 - 1 downto 0);
    grp_fu_361_p_din1 <= rhs_V_2_cast_reg_785(16 - 1 downto 0);

    grp_fu_383_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_383_ce <= ap_const_logic_1;
        else 
            grp_fu_383_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_705_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_705_ce <= ap_const_logic_1;
        else 
            grp_fu_705_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_705_p1 <= rhs_V_1_cast_fu_256_p1(16 - 1 downto 0);
    grp_fu_705_p2 <= zext_ln1495_cast_reg_778(16 - 1 downto 0);

    grp_fu_712_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_712_ce <= ap_const_logic_1;
        else 
            grp_fu_712_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_712_p1 <= rhs_V_1_cast_fu_256_p1(16 - 1 downto 0);
    grp_fu_712_p2 <= zext_ln1495_cast_reg_778(16 - 1 downto 0);

    grp_fu_719_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_719_ce <= ap_const_logic_1;
        else 
            grp_fu_719_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_719_p1 <= rhs_V_1_cast_fu_256_p1(16 - 1 downto 0);
    grp_fu_719_p2 <= zext_ln1495_cast_reg_778(16 - 1 downto 0);

    grp_fu_726_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_726_ce <= ap_const_logic_1;
        else 
            grp_fu_726_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_726_p1 <= rhs_V_1_cast_reg_790(16 - 1 downto 0);

    grp_load_fu_237_p1_assign_proc : process(mode, ap_sig_allocacmp_sum_1_load_3, ap_sig_allocacmp_sum_1_load_2, ap_sig_allocacmp_sum_1_load_1, ap_condition_455)
    begin
        if ((ap_const_boolean_1 = ap_condition_455)) then
            if ((mode = ap_const_lv2_0)) then 
                grp_load_fu_237_p1 <= ap_sig_allocacmp_sum_1_load_1;
            elsif ((mode = ap_const_lv2_1)) then 
                grp_load_fu_237_p1 <= ap_sig_allocacmp_sum_1_load_2;
            elsif ((mode = ap_const_lv2_2)) then 
                grp_load_fu_237_p1 <= ap_sig_allocacmp_sum_1_load_3;
            else 
                grp_load_fu_237_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_load_fu_237_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1027_1_fu_301_p2 <= "1" when (ap_sig_allocacmp_jj_load = Kx) else "0";
    icmp_ln1027_fu_283_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = mul_i92) else "0";
    icmp_ln44_1_fu_654_p2 <= "1" when (trunc_ln44_fu_644_p1 = ap_const_lv23_0) else "0";
    icmp_ln44_2_fu_557_p2 <= "0" when (tmp_1_reg_917 = ap_const_lv8_FF) else "1";
    icmp_ln44_3_fu_562_p2 <= "1" when (trunc_ln44_1_reg_922 = ap_const_lv23_0) else "0";
    icmp_ln44_fu_648_p2 <= "0" when (tmp_fu_634_p4 = ap_const_lv8_FF) else "1";
    icmp_ln45_1_fu_595_p2 <= "1" when (trunc_ln45_fu_585_p1 = ap_const_lv23_0) else "0";
    icmp_ln45_2_fu_543_p2 <= "0" when (tmp_4_reg_902 = ap_const_lv8_FF) else "1";
    icmp_ln45_3_fu_548_p2 <= "1" when (trunc_ln45_1_reg_907 = ap_const_lv23_0) else "0";
    icmp_ln45_fu_589_p2 <= "0" when (tmp_3_fu_575_p4 = ap_const_lv8_FF) else "1";
    jj_1_fu_370_p2 <= std_logic_vector(unsigned(select_ln36_reg_817) + unsigned(ap_const_lv8_1));
    lhs_V_fu_325_p2 <= std_logic_vector(unsigned(zext_ln40_fu_321_p1) + unsigned(mul_ln40));

    m_axi_gmem_ARADDR_assign_proc : process(mode, gmem_addr_2_reg_879, gmem_addr_1_reg_885, gmem_addr_reg_891, ap_condition_398)
    begin
        if ((ap_const_boolean_1 = ap_condition_398)) then
            if ((mode = ap_const_lv2_0)) then 
                m_axi_gmem_ARADDR <= gmem_addr_reg_891;
            elsif ((mode = ap_const_lv2_1)) then 
                m_axi_gmem_ARADDR <= gmem_addr_1_reg_885;
            elsif ((mode = ap_const_lv2_2)) then 
                m_axi_gmem_ARADDR <= gmem_addr_2_reg_879;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter1, mode, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (mode = ap_const_lv2_2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (mode = ap_const_lv2_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (mode = ap_const_lv2_0)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, mode, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv2_2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv2_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (mode = ap_const_lv2_0)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    or_ln44_1_fu_666_p2 <= (icmp_ln44_3_reg_959 or icmp_ln44_2_reg_954);
    or_ln44_fu_660_p2 <= (icmp_ln44_fu_648_p2 or icmp_ln44_1_fu_654_p2);
    or_ln45_1_fu_607_p2 <= (icmp_ln45_3_reg_943 or icmp_ln45_2_reg_938);
    or_ln45_fu_601_p2 <= (icmp_ln45_fu_589_p2 or icmp_ln45_1_fu_595_p2);
    ret_V_3_fu_429_p2 <= std_logic_vector(signed(lhs_V_4_reg_852) + signed(mul_ln36_1_reg_872));
    ret_V_6_fu_388_p2 <= std_logic_vector(signed(lhs_V_5_reg_847) + signed(mul_ln36_1_reg_872));
    ret_V_fu_470_p2 <= std_logic_vector(signed(ret_V_8_reg_857) + signed(mul_ln36_1_reg_872));
    rhs_V_1_cast_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_1),32));
    rhs_V_2_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_2),48));
    select_ln36_1_fu_343_p3 <= 
        add_ln36_1_reg_822 when (icmp_ln1027_1_reg_812(0) = '1') else 
        ii_load_reg_807;
    select_ln36_fu_307_p3 <= 
        ap_const_lv8_0 when (icmp_ln1027_1_fu_301_p2(0) = '1') else 
        ap_sig_allocacmp_jj_load;
    select_ln44_fu_682_p3 <= 
        bitcast_ln44_reg_948 when (and_ln44_1_fu_676_p2(0) = '1') else 
        reg_242;
    select_ln45_fu_623_p3 <= 
        reg_242 when (and_ln45_1_fu_617_p2(0) = '1') else 
        bitcast_ln45_reg_932;
        sext_ln36_1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln36_reg_862),48));

        sext_ln43_1_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_474_p3),64));

        sext_ln43_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_491_p4),64));

        sext_ln44_1_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_433_p3),64));

        sext_ln44_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_450_p4),64));

        sext_ln45_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln3_fu_392_p3),64));

        sext_ln45_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_409_p4),64));

    shl_ln1_fu_474_p3 <= (ret_V_fu_470_p2 & ap_const_lv2_0);
    shl_ln2_fu_433_p3 <= (ret_V_3_fu_429_p2 & ap_const_lv2_0);
    shl_ln3_fu_392_p3 <= (ret_V_6_fu_388_p2 & ap_const_lv2_0);
    sum_3_out <= sum_1_fu_122;

    sum_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln1027_reg_798_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1027_reg_798_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sum_3_out_ap_vld <= ap_const_logic_1;
        else 
            sum_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_575_p4 <= bitcast_ln45_1_fu_571_p1(30 downto 23);
    tmp_fu_634_p4 <= bitcast_ln44_1_fu_630_p1(30 downto 23);
    trunc_ln1_fu_491_p4 <= add_ln43_fu_486_p2(63 downto 2);
    trunc_ln2_fu_450_p4 <= add_ln44_fu_445_p2(63 downto 2);
    trunc_ln3_fu_409_p4 <= add_ln45_fu_404_p2(63 downto 2);
    trunc_ln44_1_fu_535_p1 <= m_axi_gmem_RDATA(23 - 1 downto 0);
    trunc_ln44_fu_644_p1 <= bitcast_ln44_1_fu_630_p1(23 - 1 downto 0);
    trunc_ln45_1_fu_521_p1 <= m_axi_gmem_RDATA(23 - 1 downto 0);
    trunc_ln45_fu_585_p1 <= bitcast_ln45_1_fu_571_p1(23 - 1 downto 0);
    zext_ln1495_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1495),48));
    zext_ln36_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_fu_343_p3),16));
    zext_ln40_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_fu_307_p3),16));
end behav;
