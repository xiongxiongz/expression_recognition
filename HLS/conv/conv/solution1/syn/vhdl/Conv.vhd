-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv_Conv,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5387,HLS_SYN_LUT=6050,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (72 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (72 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (72 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (72 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (72 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (72 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (72 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (72 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (72 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (72 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv48_1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin : STD_LOGIC_VECTOR (15 downto 0);
    signal Win : STD_LOGIC_VECTOR (15 downto 0);
    signal CHout : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx : STD_LOGIC_VECTOR (7 downto 0);
    signal Sy : STD_LOGIC_VECTOR (7 downto 0);
    signal mode : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_en : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (63 downto 0);
    signal W : STD_LOGIC_VECTOR (63 downto 0);
    signal bias : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal feature_out_read_reg_1415 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias_read_reg_1420 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_read_reg_1426 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in_read_reg_1431 : STD_LOGIC_VECTOR (63 downto 0);
    signal relu_en_read_reg_1436 : STD_LOGIC_VECTOR (0 downto 0);
    signal mode_read_reg_1441 : STD_LOGIC_VECTOR (0 downto 0);
    signal Sy_read_reg_1447 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_read_reg_1453 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_read_reg_1459 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_read_reg_1466 : STD_LOGIC_VECTOR (7 downto 0);
    signal CHout_read_reg_1474 : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_read_reg_1481 : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_read_reg_1487 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_read_reg_1492 : STD_LOGIC_VECTOR (15 downto 0);
    signal pad_x_V_1_fu_553_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_x_V_1_reg_1506 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal pad_y_V_1_fu_560_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_y_V_1_reg_1511 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1513_3_fu_579_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1513_3_reg_1516 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1513_2_fu_582_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1513_2_reg_1521 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1513_8_fu_600_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1513_8_reg_1526 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1513_3_fu_603_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1513_3_reg_1532 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal Wout_V_fu_655_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Wout_V_reg_1557 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_645_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sdiv_ln1513_1_reg_1564 : STD_LOGIC_VECTOR (15 downto 0);
    signal Wout_V_cast_fu_670_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Wout_V_cast_reg_1569 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_1317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln6_1_reg_1581 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal CHout_cast_fu_677_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal CHout_cast_reg_1587 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal Sy_cast5_fu_689_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Sy_cast5_reg_1600 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal pad_y_V_1_cast6_fu_692_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal pad_y_V_1_cast6_reg_1606 : STD_LOGIC_VECTOR (15 downto 0);
    signal Sx_cast9_fu_695_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Sx_cast9_reg_1611 : STD_LOGIC_VECTOR (15 downto 0);
    signal pad_x_V_1_cast10_fu_698_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal pad_x_V_1_cast10_reg_1616 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i402_fu_701_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i_i402_reg_1621 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_7_fu_704_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_7_reg_1628 : STD_LOGIC_VECTOR (47 downto 0);
    signal Kx_cast14_fu_707_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_cast14_reg_1633 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_cast18_fu_710_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal CHin_cast18_reg_1638 : STD_LOGIC_VECTOR (23 downto 0);
    signal CHout_cast12_fu_713_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal CHout_cast12_reg_1643 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp_i_i4032253_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i4032253_reg_1648 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln6_fu_724_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln6_reg_1652 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_683_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln6_2_reg_1657 : STD_LOGIC_VECTOR (47 downto 0);
    signal icmp_ln1027_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_1662 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_1323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_reg_1675 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_745_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_i_reg_1685 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln541_fu_787_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln541_reg_1693 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal add_ln1027_1_fu_797_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln1027_1_reg_1701 : STD_LOGIC_VECTOR (47 downto 0);
    signal icmp_ln1027_2_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_2_reg_1706 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_1_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_fu_811_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_reg_1715 : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_addr_reg_1721 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1027_5_fu_867_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1027_5_reg_1727 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_fu_880_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln42_reg_1734 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_4_fu_894_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of i_4_fu_894_p2 : signal is "no";
    signal select_ln1027_6_fu_904_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1027_6_reg_1751 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1328_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1495_reg_1756 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal sub_ln42_fu_923_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln42_reg_1761 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_1345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_mid1_reg_1767 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_931_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_i_mid1_reg_1777 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal select_ln1027_1_fu_936_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1027_1_reg_1782 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal select_ln42_2_fu_959_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln42_2_reg_1788 : STD_LOGIC_VECTOR (47 downto 0);
    signal bitcast_ln1027_fu_966_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1027_reg_1793 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln51_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_1798 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal add_ln1027_2_fu_993_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1027_2_reg_1806 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1027_6_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_6_reg_1811 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_4_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_fu_1004_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_reg_1816 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_1_fu_1027_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln45_1_reg_1823 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln45_2_fu_1043_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_2_reg_1833 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln51_1_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_1_reg_1839 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln45_2_fu_1102_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln45_2_reg_1849 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ret_V_8_fu_1115_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of ret_V_8_fu_1115_p2 : signal is "no";
    signal ret_V_8_reg_1854 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln51_1_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_1_reg_1859 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln45_reg_1863 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_1163_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln45_1_reg_1883 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_1362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln45_3_reg_1888 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal add_ln186_2_fu_1185_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln186_2_reg_1893 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_reg_1903 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal tmp_fu_1205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of tmp_fu_1205_p2 : signal is "no";
    signal tmp_reg_1908 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_1213_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp12_reg_1918 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal jj_fu_1222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal gmem_addr_1_reg_1928 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_1934 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_fu_1309_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_reg_1940 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_start : STD_LOGIC;
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_done : STD_LOGIC;
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_idle : STD_LOGIC;
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_ready : STD_LOGIC;
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_sum_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_sum_2_out_ap_vld : STD_LOGIC;
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_ce : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal indvar_flatten_reg_326 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_reg_337 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_2_reg_348 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_3_phi_fu_375_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (72 downto 0);
    signal ap_NS_fsm_state59 : STD_LOGIC;
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal sext_ln1027_1_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln70_fu_1253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_1_fu_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_1059_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_194 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten21_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1027_7_fu_1070_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_fu_202 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten64_fu_206 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_401_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal zext_ln1513_fu_439_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1513_fu_442_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1513_fu_456_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1513_1_fu_462_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_448_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1513_1_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1513_2_fu_478_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1513_1_fu_496_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1513_1_fu_499_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1513_2_fu_513_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1513_4_fu_519_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_505_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1513_3_fu_529_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1513_5_fu_535_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_x_V_fu_488_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_y_V_fu_545_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_567_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1513_2_fu_575_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln1513_1_fu_588_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1513_7_fu_596_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1513_4_fu_609_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1513_5_fu_612_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_624_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_624_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1513_9_fu_630_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1513_10_fu_633_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_645_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_645_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_624_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln186_fu_651_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln186_1_fu_661_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Hout_V_fu_664_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_683_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln6_fu_724_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln6_fu_724_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast7_fu_738_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_745_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_745_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_760_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_cast26_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_772_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_fu_756_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_mid_fu_817_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_cast26_mid1_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_mid138_fu_829_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_mid1_fu_834_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast_fu_777_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln1027_2_fu_844_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln1027_3_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1027_fu_888_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1027_fu_888_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1334_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1339_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1027_3_fu_911_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln42_1_fu_917_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_931_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_931_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1027_1_fu_941_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1027_2_fu_944_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln541_2_fu_954_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln1027_4_fu_948_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ii_cast27_fu_970_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_6_fu_974_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_cast_fu_979_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln46_fu_1012_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_cast27_mid1_fu_1018_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_mid1_fu_1022_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_cast_mid1_fu_1039_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1027_fu_1064_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln45_2_fu_1102_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln45_2_fu_1102_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln186_fu_1112_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln51_fu_1120_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_1125_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1027_fu_1139_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1027_5_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln51_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_3_fu_1107_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1163_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1367_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln2_fu_1174_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln186_2_fu_1181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1374_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln45_fu_1193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1213_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1355_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln1_fu_1227_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln70_1_fu_1234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln70_fu_1238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_1243_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln67_fu_1263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1266_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln67_fu_1276_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln67_1_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_fu_1280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln67_fu_1292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_1298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1317_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1317_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1323_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1323_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1328_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1328_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_1334_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1339_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1345_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1345_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1355_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1355_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_fu_1362_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1362_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1367_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_1374_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_401_ce : STD_LOGIC;
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_fu_624_ap_start : STD_LOGIC;
    signal grp_fu_624_ap_done : STD_LOGIC;
    signal grp_fu_645_ap_start : STD_LOGIC;
    signal grp_fu_645_ap_done : STD_LOGIC;
    signal grp_fu_1328_ce : STD_LOGIC;
    signal grp_fu_1334_ce : STD_LOGIC;
    signal grp_fu_1339_ce : STD_LOGIC;
    signal grp_fu_1345_ce : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal grp_fu_1213_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_1317_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1317_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1323_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1345_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1355_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1362_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1374_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_624_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_645_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_683_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_683_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_745_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_931_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln45_2_fu_1102_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln6_fu_724_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln6_fu_724_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Conv_Conv_Pipeline_VITIS_LOOP_53_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sum_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        CHin : IN STD_LOGIC_VECTOR (15 downto 0);
        trunc_ln53_cast : IN STD_LOGIC_VECTOR (61 downto 0);
        CHout_cast12 : IN STD_LOGIC_VECTOR (15 downto 0);
        zext_ln1027_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp12 : IN STD_LOGIC_VECTOR (47 downto 0);
        W : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_2_out_ap_vld : OUT STD_LOGIC;
        grp_fu_401_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_401_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_401_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_401_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_401_p_ce : OUT STD_LOGIC );
    end component;


    component Conv_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sdiv_18ns_9ns_16_22_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_16ns_32ns_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_32ns_16ns_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mul_32s_16ns_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mac_mul_sub_16ns_8ns_8ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_mul_16ns_8ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_mul_16s_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mac_muladd_16ns_16ns_48ns_48_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mac_muladd_16s_16ns_48s_48_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mul_mul_8ns_16ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Conv_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        CHin : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win : OUT STD_LOGIC_VECTOR (15 downto 0);
        CHout : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sx : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sy : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode : OUT STD_LOGIC_VECTOR (0 downto 0);
        relu_en : OUT STD_LOGIC_VECTOR (0 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        W : OUT STD_LOGIC_VECTOR (63 downto 0);
        bias : OUT STD_LOGIC_VECTOR (63 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component Conv_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386 : component Conv_Conv_Pipeline_VITIS_LOOP_53_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_start,
        ap_done => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_done,
        ap_idle => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_idle,
        ap_ready => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_ready,
        m_axi_gmem_AWVALID => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        sum_1 => sum_1_reg_359,
        CHin => CHin_read_reg_1492,
        trunc_ln53_cast => trunc_ln4_reg_1903,
        CHout_cast12 => CHout_read_reg_1474,
        zext_ln1027_1 => select_ln1027_1_reg_1782,
        tmp12 => tmp12_reg_1918,
        W => W_read_reg_1426,
        sum_2_out => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_sum_2_out,
        sum_2_out_ap_vld => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_sum_2_out_ap_vld,
        grp_fu_401_p_din0 => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_din0,
        grp_fu_401_p_din1 => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_din1,
        grp_fu_401_p_opcode => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_opcode,
        grp_fu_401_p_dout0 => grp_fu_401_p2,
        grp_fu_401_p_ce => grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_ce);

    control_s_axi_U : component Conv_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        CHin => CHin,
        Hin => Hin,
        Win => Win,
        CHout => CHout,
        Kx => Kx,
        Ky => Ky,
        Sx => Sx,
        Sy => Sy,
        mode => mode,
        relu_en => relu_en,
        feature_in => feature_in,
        W => W,
        bias => bias,
        feature_out => feature_out,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component Conv_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARLEN => gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_1928,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => select_ln70_reg_1940,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY);

    fadd_32ns_32ns_32_5_full_dsp_1_U13 : component Conv_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_401_p0,
        din1 => grp_fu_401_p1,
        ce => grp_fu_401_ce,
        dout => grp_fu_401_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U14 : component Conv_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_reg_1934,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_406_p2);

    sdiv_18ns_9ns_16_22_seq_1_U15 : component Conv_sdiv_18ns_9ns_16_22_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_624_ap_start,
        done => grp_fu_624_ap_done,
        din0 => grp_fu_624_p0,
        din1 => grp_fu_624_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_624_p2);

    sdiv_18ns_9ns_16_22_seq_1_U16 : component Conv_sdiv_18ns_9ns_16_22_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_645_ap_start,
        done => grp_fu_645_ap_done,
        din0 => grp_fu_645_p0,
        din1 => grp_fu_645_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_645_p2);

    mul_16ns_32ns_48_2_1_U17 : component Conv_mul_16ns_32ns_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_683_p0,
        din1 => grp_fu_683_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_683_p2);

    mul_8ns_8ns_16_1_1_U18 : component Conv_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln6_fu_724_p0,
        din1 => mul_ln6_fu_724_p1,
        dout => mul_ln6_fu_724_p2);

    mul_32ns_16ns_48_2_1_U19 : component Conv_mul_32ns_16ns_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_745_p0,
        din1 => grp_fu_745_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_745_p2);

    mul_32ns_16ns_48_2_1_U20 : component Conv_mul_32ns_16ns_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_931_p0,
        din1 => grp_fu_931_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_931_p2);

    mul_8ns_8ns_16_1_1_U21 : component Conv_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln45_2_fu_1102_p0,
        din1 => mul_ln45_2_fu_1102_p1,
        dout => mul_ln45_2_fu_1102_p2);

    mul_32s_16ns_48_2_1_U22 : component Conv_mul_32s_16ns_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_ln45_reg_1863,
        din1 => grp_fu_1163_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1163_p2);

    mul_32ns_16ns_48_2_1_U23 : component Conv_mul_32ns_16ns_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1213_p0,
        din1 => grp_fu_1213_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1213_p2);

    mul_mul_16ns_16ns_32_4_1_U24 : component Conv_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1317_p0,
        din1 => grp_fu_1317_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1317_p2);

    mul_mul_16ns_16ns_32_4_1_U25 : component Conv_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1323_p0,
        din1 => grp_fu_1323_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1323_p2);

    mac_mul_sub_16ns_8ns_8ns_16_4_1_U26 : component Conv_mac_mul_sub_16ns_8ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1328_p0,
        din1 => grp_fu_1328_p1,
        din2 => grp_fu_1328_p2,
        ce => grp_fu_1328_ce,
        dout => grp_fu_1328_p3);

    mul_mul_16ns_8ns_16_4_1_U27 : component Conv_mul_mul_16ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_fu_194,
        din1 => grp_fu_1334_p1,
        ce => grp_fu_1334_ce,
        dout => grp_fu_1334_p2);

    mul_mul_16ns_8ns_16_4_1_U28 : component Conv_mul_mul_16ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_4_fu_894_p2,
        din1 => grp_fu_1339_p1,
        ce => grp_fu_1339_ce,
        dout => grp_fu_1339_p2);

    mul_mul_16ns_16ns_32_4_1_U29 : component Conv_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1345_p0,
        din1 => grp_fu_1345_p1,
        ce => grp_fu_1345_ce,
        dout => grp_fu_1345_p2);

    mul_mul_16s_16ns_32_4_1_U30 : component Conv_mul_mul_16s_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln45_1_fu_1027_p3,
        din1 => grp_fu_1350_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1350_p2);

    mac_muladd_16ns_16ns_48ns_48_4_1_U31 : component Conv_mac_muladd_16ns_16ns_48ns_48_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1355_p0,
        din1 => grp_fu_1355_p1,
        din2 => select_ln42_2_reg_1788,
        ce => ap_const_logic_1,
        dout => grp_fu_1355_p3);

    mul_mul_16ns_16ns_32_4_1_U32 : component Conv_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1362_p0,
        din1 => grp_fu_1362_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1362_p2);

    mac_muladd_16s_16ns_48s_48_4_1_U33 : component Conv_mac_muladd_16s_16ns_48s_48_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ret_V_8_reg_1854,
        din1 => grp_fu_1367_p1,
        din2 => mul_ln45_1_reg_1883,
        ce => ap_const_logic_1,
        dout => grp_fu_1367_p3);

    mul_mul_8ns_16ns_24_4_1_U34 : component Conv_mul_mul_8ns_16ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1374_p0,
        din1 => grp_fu_1374_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1374_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state59) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                    grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_ready = ap_const_logic_1)) then 
                    grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cout_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cout_fu_202 <= ap_const_lv16_0;
            elsif (((icmp_ln1027_4_fu_988_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                cout_fu_202 <= select_ln1027_1_reg_1782;
            end if; 
        end if;
    end process;

    i_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_194 <= ap_const_lv16_0;
            elsif (((icmp_ln1027_4_fu_988_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                i_fu_194 <= select_ln1027_6_reg_1751;
            end if; 
        end if;
    end process;

    ii_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                ii_reg_337 <= select_ln45_2_reg_1833;
            elsif (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                ii_reg_337 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten21_fu_198 <= ap_const_lv32_0;
            elsif (((icmp_ln1027_4_fu_988_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                indvar_flatten21_fu_198 <= select_ln1027_7_fu_1070_p3;
            end if; 
        end if;
    end process;

    indvar_flatten64_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten64_fu_206 <= ap_const_lv48_0;
            elsif (((icmp_ln1027_4_fu_988_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                indvar_flatten64_fu_206 <= add_ln1027_1_reg_1701;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                indvar_flatten_reg_326 <= add_ln1027_2_reg_1806;
            elsif (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                indvar_flatten_reg_326 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    jj_2_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                jj_2_reg_348 <= jj_fu_1222_p2;
            elsif (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                jj_2_reg_348 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    lhs_V_1_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lhs_V_1_fu_190 <= ap_const_lv16_0;
            elsif (((icmp_ln1027_4_fu_988_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                lhs_V_1_fu_190 <= j_fu_1059_p2;
            end if; 
        end if;
    end process;

    sum_1_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                sum_1_reg_359 <= ap_phi_mux_sum_3_phi_fu_375_p6;
            elsif (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                sum_1_reg_359 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_3_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln51_1_reg_1859) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((cmp_i_i4032253_reg_1648 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56)))) then 
                sum_3_reg_371 <= sum_1_reg_359;
            elsif (((ap_const_lv1_1 = and_ln51_1_reg_1859) and (cmp_i_i4032253_reg_1648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                sum_3_reg_371 <= grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_sum_2_out;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    CHin_cast18_reg_1638(15 downto 0) <= CHin_cast18_fu_710_p1(15 downto 0);
                    CHout_cast12_reg_1643(15 downto 0) <= CHout_cast12_fu_713_p1(15 downto 0);
                    Kx_cast14_reg_1633(7 downto 0) <= Kx_cast14_fu_707_p1(7 downto 0);
                    Sx_cast9_reg_1611(7 downto 0) <= Sx_cast9_fu_695_p1(7 downto 0);
                    Sy_cast5_reg_1600(7 downto 0) <= Sy_cast5_fu_689_p1(7 downto 0);
                cmp_i_i4032253_reg_1648 <= cmp_i_i4032253_fu_716_p2;
                    conv_i_i402_reg_1621(15 downto 0) <= conv_i_i402_fu_701_p1(15 downto 0);
                icmp_ln1027_reg_1662 <= icmp_ln1027_fu_730_p2;
                mul_ln6_2_reg_1657 <= grp_fu_683_p2;
                mul_ln6_reg_1652 <= mul_ln6_fu_724_p2;
                    pad_x_V_1_cast10_reg_1616(7 downto 0) <= pad_x_V_1_cast10_fu_698_p1(7 downto 0);
                    pad_y_V_1_cast6_reg_1606(7 downto 0) <= pad_y_V_1_cast6_fu_692_p1(7 downto 0);
                    rhs_V_7_reg_1628(15 downto 0) <= rhs_V_7_fu_704_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                CHin_read_reg_1492 <= CHin;
                CHout_read_reg_1474 <= CHout;
                Hin_read_reg_1487 <= Hin;
                Kx_read_reg_1466 <= Kx;
                Ky_read_reg_1459 <= Ky;
                Sx_read_reg_1453 <= Sx;
                Sy_read_reg_1447 <= Sy;
                W_read_reg_1426 <= W;
                Win_read_reg_1481 <= Win;
                bias_read_reg_1420 <= bias;
                feature_in_read_reg_1431 <= feature_in;
                feature_out_read_reg_1415 <= feature_out;
                mode_read_reg_1441 <= mode;
                relu_en_read_reg_1436 <= relu_en;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                    CHout_cast_reg_1587(15 downto 0) <= CHout_cast_fu_677_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                    Wout_V_cast_reg_1569(15 downto 0) <= Wout_V_cast_fu_670_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                Wout_V_reg_1557 <= Wout_V_fu_655_p2;
                sdiv_ln1513_1_reg_1564 <= grp_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                add_ln1027_1_reg_1701 <= add_ln1027_1_fu_797_p2;
                add_ln541_reg_1693 <= add_ln541_fu_787_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                add_ln1027_2_reg_1806 <= add_ln1027_2_fu_993_p2;
                icmp_ln51_reg_1798 <= icmp_ln51_fu_983_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln1513_2_reg_1521 <= add_ln1513_2_fu_582_p2;
                add_ln1513_3_reg_1532 <= add_ln1513_3_fu_603_p2;
                pad_x_V_1_reg_1506 <= pad_x_V_1_fu_553_p3;
                pad_y_V_1_reg_1511 <= pad_y_V_1_fu_560_p3;
                    zext_ln1513_3_reg_1516(15 downto 0) <= zext_ln1513_3_fu_579_p1(15 downto 0);
                    zext_ln1513_8_reg_1526(15 downto 0) <= zext_ln1513_8_fu_600_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                add_ln186_2_reg_1893 <= add_ln186_2_fu_1185_p2;
                mul_ln45_3_reg_1888 <= grp_fu_1362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_1_fu_792_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                add_ln41_reg_1715 <= add_ln41_fu_811_p2;
                gmem_addr_reg_1721 <= sext_ln1027_1_fu_852_p1;
                icmp_ln1027_2_reg_1706 <= icmp_ln1027_2_fu_806_p2;
                select_ln1027_5_reg_1727 <= select_ln1027_5_fu_867_p3;
                select_ln42_reg_1734 <= select_ln42_fu_880_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                and_ln51_1_reg_1859 <= and_ln51_1_fu_1154_p2;
                mul_ln45_2_reg_1849 <= mul_ln45_2_fu_1102_p2;
                ret_V_8_reg_1854 <= ret_V_8_fu_1115_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                bitcast_ln1027_reg_1793 <= bitcast_ln1027_fu_966_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                gmem_addr_1_reg_1928 <= sext_ln70_fu_1253_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_4_fu_988_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                icmp_ln1027_6_reg_1811 <= icmp_ln1027_6_fu_999_p2;
                icmp_ln51_1_reg_1839 <= icmp_ln51_1_fu_1051_p2;
                select_ln45_1_reg_1823 <= select_ln45_1_fu_1027_p3;
                select_ln45_2_reg_1833 <= select_ln45_2_fu_1043_p3;
                select_ln45_reg_1816 <= select_ln45_fu_1004_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln1027_5_reg_1727 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                mul_i_mid1_reg_1777 <= grp_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                mul_i_reg_1685 <= grp_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                mul_ln45_1_reg_1883 <= grp_fu_1163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                mul_ln45_reg_1863 <= grp_fu_1350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                mul_ln6_1_reg_1581 <= grp_fu_1317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln1027_5_reg_1727 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                ret_V_1_mid1_reg_1767 <= grp_fu_1345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                ret_V_1_reg_1675 <= grp_fu_1323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                select_ln1027_1_reg_1782 <= select_ln1027_1_fu_936_p3;
                select_ln42_2_reg_1788 <= select_ln42_2_fu_959_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                select_ln1027_6_reg_1751 <= select_ln1027_6_fu_904_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                select_ln70_reg_1940 <= select_ln70_fu_1309_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                sub_ln1495_reg_1756 <= grp_fu_1328_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                sub_ln42_reg_1761 <= sub_ln42_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                sum_reg_1934 <= grp_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                tmp12_reg_1918 <= grp_fu_1213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp_i_i4032253_reg_1648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                tmp_reg_1908 <= tmp_fu_1205_p2;
                trunc_ln4_reg_1903 <= add_ln186_2_reg_1893(63 downto 2);
            end if;
        end if;
    end process;
    zext_ln1513_3_reg_1516(16) <= '0';
    zext_ln1513_8_reg_1526(16) <= '0';
    Wout_V_cast_reg_1569(31 downto 16) <= "0000000000000000";
    CHout_cast_reg_1587(47 downto 16) <= "00000000000000000000000000000000";
    Sy_cast5_reg_1600(15 downto 8) <= "00000000";
    pad_y_V_1_cast6_reg_1606(15 downto 8) <= "00000000";
    Sx_cast9_reg_1611(15 downto 8) <= "00000000";
    pad_x_V_1_cast10_reg_1616(15 downto 8) <= "00000000";
    conv_i_i402_reg_1621(31 downto 16) <= "0000000000000000";
    rhs_V_7_reg_1628(47 downto 16) <= "00000000000000000000000000000000";
    Kx_cast14_reg_1633(15 downto 8) <= "00000000";
    CHin_cast18_reg_1638(23 downto 16) <= "00000000";
    CHout_cast12_reg_1643(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state65, ap_CS_fsm_state68, ap_CS_fsm_state73, ap_CS_fsm_state38, ap_CS_fsm_state45, cmp_i_i4032253_reg_1648, ap_CS_fsm_state37, icmp_ln1027_1_fu_792_p2, ap_CS_fsm_state46, icmp_ln1027_4_fu_988_p2, and_ln51_1_reg_1859, ap_CS_fsm_state53, ap_CS_fsm_state56, grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_done, gmem_AWREADY, gmem_WREADY, gmem_ARREADY, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state60)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln1027_1_fu_792_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if (((icmp_ln1027_4_fu_988_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((ap_const_lv1_0 = and_ln51_1_reg_1859) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((cmp_i_i4032253_reg_1648 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    CHin_cast18_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_read_reg_1492),24));
    CHout_cast12_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHout_read_reg_1474),32));
    CHout_cast_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHout_read_reg_1474),48));
    Hout_V_fu_664_p2 <= std_logic_vector(unsigned(trunc_ln186_1_fu_661_p1) + unsigned(ap_const_lv16_1));
    Kx_cast14_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_read_reg_1466),16));
    Sx_cast9_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sx_read_reg_1453),16));
    Sy_cast5_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sy_read_reg_1447),16));
    Wout_V_cast_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Wout_V_reg_1557),32));
    Wout_V_fu_655_p2 <= std_logic_vector(unsigned(trunc_ln186_fu_651_p1) + unsigned(ap_const_lv16_1));
    add_ln1027_1_fu_797_p2 <= std_logic_vector(unsigned(indvar_flatten64_fu_206) + unsigned(ap_const_lv48_1));
    add_ln1027_2_fu_993_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_326) + unsigned(ap_const_lv16_1));
    add_ln1027_fu_1064_p2 <= std_logic_vector(unsigned(indvar_flatten21_fu_198) + unsigned(ap_const_lv32_1));
    add_ln1513_1_fu_499_p2 <= std_logic_vector(unsigned(zext_ln1513_1_fu_496_p1) + unsigned(ap_const_lv9_1FF));
    add_ln1513_2_fu_582_p2 <= std_logic_vector(unsigned(zext_ln1513_2_fu_575_p1) + unsigned(zext_ln1513_3_fu_579_p1));
    add_ln1513_3_fu_603_p2 <= std_logic_vector(unsigned(zext_ln1513_7_fu_596_p1) + unsigned(zext_ln1513_8_fu_600_p1));
    add_ln1513_fu_442_p2 <= std_logic_vector(unsigned(zext_ln1513_fu_439_p1) + unsigned(ap_const_lv9_1FF));
    add_ln186_2_fu_1185_p2 <= std_logic_vector(signed(sext_ln186_2_fu_1181_p1) + signed(feature_in_read_reg_1431));
    add_ln41_fu_811_p2 <= std_logic_vector(unsigned(cout_fu_202) + unsigned(ap_const_lv16_1));
    add_ln46_fu_1012_p2 <= std_logic_vector(unsigned(ii_reg_337) + unsigned(ap_const_lv8_1));
    add_ln541_2_fu_954_p2 <= std_logic_vector(unsigned(mul_i_mid1_reg_1777) + unsigned(zext_ln1027_2_fu_944_p1));
    add_ln541_fu_787_p2 <= std_logic_vector(unsigned(mul_i_reg_1685) + unsigned(zext_ln1027_fu_756_p1));
    add_ln70_fu_1238_p2 <= std_logic_vector(unsigned(zext_ln70_1_fu_1234_p1) + unsigned(feature_out_read_reg_1415));
    and_ln51_1_fu_1154_p2 <= (select_ln45_3_fu_1107_p3 and and_ln51_fu_1148_p2);
    and_ln51_fu_1148_p2 <= (xor_ln51_fu_1133_p2 and icmp_ln1027_5_fu_1143_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_NS_fsm_state59 <= ap_NS_fsm(58);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;

    ap_ST_fsm_state45_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state45_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state45_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state60_blk_assign_proc : process(grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_done)
    begin
        if ((grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state60_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state60_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;

    ap_ST_fsm_state65_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state65_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state65_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;

    ap_ST_fsm_state68_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state68_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state68_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;

    ap_ST_fsm_state73_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state73_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state73_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state37, icmp_ln1027_1_fu_792_p2)
    begin
        if (((icmp_ln1027_1_fu_792_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_sum_3_phi_fu_375_p6_assign_proc : process(cmp_i_i4032253_reg_1648, and_ln51_1_reg_1859, ap_CS_fsm_state61, grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_sum_2_out, sum_3_reg_371)
    begin
        if (((ap_const_lv1_1 = and_ln51_1_reg_1859) and (cmp_i_i4032253_reg_1648 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            ap_phi_mux_sum_3_phi_fu_375_p6 <= grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_sum_2_out;
        else 
            ap_phi_mux_sum_3_phi_fu_375_p6 <= sum_3_reg_371;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37, icmp_ln1027_1_fu_792_p2)
    begin
        if (((icmp_ln1027_1_fu_792_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln1027_fu_966_p1 <= gmem_RDATA;
    bitcast_ln67_fu_1263_p1 <= sum_reg_1934;
    cmp_i_i4032253_fu_716_p2 <= "1" when (CHin_read_reg_1492 = ap_const_lv16_0) else "0";
    conv_i_i402_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_read_reg_1492),32));
    empty_fu_772_p2 <= std_logic_vector(unsigned(p_cast26_fu_768_p1) + unsigned(bias_read_reg_1420));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state38, gmem_addr_reg_1721, grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARADDR, gmem_ARREADY, ap_CS_fsm_state60, ap_CS_fsm_state59)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            gmem_ARADDR <= gmem_addr_reg_1721;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            gmem_ARADDR <= grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state38, grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARLEN, gmem_ARREADY, ap_CS_fsm_state60, ap_CS_fsm_state59)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            gmem_ARLEN <= grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state38, grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARVALID, gmem_ARREADY, ap_CS_fsm_state60, ap_CS_fsm_state59)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            gmem_ARVALID <= grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state65, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state73, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state45, grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_RREADY, gmem_RVALID, ap_CS_fsm_state60, ap_CS_fsm_state59)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            gmem_RREADY <= grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state68, gmem_WREADY)
    begin
        if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_start <= grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_ap_start_reg;
    grp_fu_1163_p1 <= rhs_V_7_reg_1628(16 - 1 downto 0);
    grp_fu_1213_p0 <= grp_fu_1213_p00(32 - 1 downto 0);
    grp_fu_1213_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1908),48));
    grp_fu_1213_p1 <= CHout_cast_reg_1587(16 - 1 downto 0);
    grp_fu_1317_p0 <= grp_fu_1317_p00(16 - 1 downto 0);
    grp_fu_1317_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hout_V_fu_664_p2),32));
    grp_fu_1317_p1 <= grp_fu_1317_p10(16 - 1 downto 0);
    grp_fu_1317_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Wout_V_reg_1557),32));
    grp_fu_1323_p0 <= grp_fu_1323_p00(16 - 1 downto 0);
    grp_fu_1323_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast7_fu_738_p0),32));
    grp_fu_1323_p1 <= Wout_V_cast_reg_1569(16 - 1 downto 0);

    grp_fu_1328_ce_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state37, ap_CS_fsm_state40, gmem_ARREADY, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            grp_fu_1328_ce <= ap_const_logic_1;
        else 
            grp_fu_1328_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1328_p0 <= 
        ap_const_lv16_0 when (or_ln42_fu_874_p2(0) = '1') else 
        lhs_V_1_fu_190;
    grp_fu_1328_p1 <= Sx_cast9_reg_1611(8 - 1 downto 0);
    grp_fu_1328_p2 <= pad_x_V_1_cast10_reg_1616(8 - 1 downto 0);

    grp_fu_1334_ce_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state41, gmem_ARREADY, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            grp_fu_1334_ce <= ap_const_logic_1;
        else 
            grp_fu_1334_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1334_p1 <= Sy_cast5_reg_1600(8 - 1 downto 0);

    grp_fu_1339_ce_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state41, gmem_ARREADY, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            grp_fu_1339_ce <= ap_const_logic_1;
        else 
            grp_fu_1339_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1339_p1 <= Sy_cast5_reg_1600(8 - 1 downto 0);

    grp_fu_1345_ce_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state41, gmem_ARREADY, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            grp_fu_1345_ce <= ap_const_logic_1;
        else 
            grp_fu_1345_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1345_p0 <= grp_fu_1345_p00(16 - 1 downto 0);
    grp_fu_1345_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_894_p2),32));
    grp_fu_1345_p1 <= Wout_V_cast_reg_1569(16 - 1 downto 0);
    grp_fu_1350_p1 <= conv_i_i402_reg_1621(16 - 1 downto 0);
    grp_fu_1355_p0 <= grp_fu_1355_p00(16 - 1 downto 0);
    grp_fu_1355_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_reg_1734),32));
    grp_fu_1355_p1 <= CHout_cast12_reg_1643(16 - 1 downto 0);
    grp_fu_1362_p0 <= grp_fu_1362_p00(16 - 1 downto 0);
    grp_fu_1362_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln45_2_reg_1849),32));
    grp_fu_1362_p1 <= conv_i_i402_reg_1621(16 - 1 downto 0);
    grp_fu_1367_p1 <= conv_i_i402_reg_1621(16 - 1 downto 0);
    grp_fu_1374_p0 <= grp_fu_1374_p00(8 - 1 downto 0);
    grp_fu_1374_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_reg_1816),24));
    grp_fu_1374_p1 <= CHin_cast18_reg_1638(16 - 1 downto 0);

    grp_fu_401_ce_assign_proc : process(ap_CS_fsm_state65, ap_CS_fsm_state46, ap_CS_fsm_state64, grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_ce, gmem_AWREADY, ap_CS_fsm_state60, ap_CS_fsm_state63, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_401_ce <= grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state63) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65)))) then 
            grp_fu_401_ce <= ap_const_logic_1;
        else 
            grp_fu_401_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_401_p0_assign_proc : process(ap_CS_fsm_state46, grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_din0, sum_1_reg_359, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_401_p0 <= grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_401_p0 <= sum_1_reg_359;
        else 
            grp_fu_401_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_401_p1_assign_proc : process(bitcast_ln1027_reg_1793, ap_CS_fsm_state46, grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_din1, ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_401_p1 <= grp_Conv_Pipeline_VITIS_LOOP_53_6_fu_386_grp_fu_401_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_401_p1 <= bitcast_ln1027_reg_1793;
        else 
            grp_fu_401_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_624_ap_start_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_624_ap_start <= ap_const_logic_1;
        else 
            grp_fu_624_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_624_p0 <= std_logic_vector(unsigned(zext_ln1513_4_fu_609_p1) - unsigned(zext_ln1513_5_fu_612_p1));
    grp_fu_624_p1 <= grp_fu_624_p10(9 - 1 downto 0);
    grp_fu_624_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sx_read_reg_1453),18));

    grp_fu_645_ap_start_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_645_ap_start <= ap_const_logic_1;
        else 
            grp_fu_645_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_645_p0 <= std_logic_vector(unsigned(zext_ln1513_9_fu_630_p1) - unsigned(zext_ln1513_10_fu_633_p1));
    grp_fu_645_p1 <= grp_fu_645_p10(9 - 1 downto 0);
    grp_fu_645_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sy_read_reg_1447),18));
    grp_fu_683_p0 <= grp_fu_683_p00(16 - 1 downto 0);
    grp_fu_683_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHout_read_reg_1474),48));
    grp_fu_683_p1 <= grp_fu_683_p10(32 - 1 downto 0);
    grp_fu_683_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln6_1_reg_1581),48));
    grp_fu_745_p0 <= grp_fu_745_p00(32 - 1 downto 0);
    grp_fu_745_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_reg_1675),48));
    grp_fu_745_p1 <= CHout_cast_reg_1587(16 - 1 downto 0);
    grp_fu_931_p0 <= grp_fu_931_p00(32 - 1 downto 0);
    grp_fu_931_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_mid1_reg_1767),48));
    grp_fu_931_p1 <= CHout_cast_reg_1587(16 - 1 downto 0);
        h_V_cast_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_6_fu_974_p2),17));

        h_V_cast_mid1_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_mid1_fu_1022_p2),17));

    i_4_fu_894_p2 <= std_logic_vector(unsigned(select_ln1027_fu_888_p3) + unsigned(ap_const_lv16_1));
    i_cast7_fu_738_p0 <= i_fu_194;
    icmp_ln1027_1_fu_792_p2 <= "1" when (indvar_flatten64_fu_206 = mul_ln6_2_reg_1657) else "0";
    icmp_ln1027_2_fu_806_p2 <= "1" when (indvar_flatten21_fu_198 = mul_ln6_1_reg_1581) else "0";
    icmp_ln1027_3_fu_862_p2 <= "1" when (lhs_V_1_fu_190 = Wout_V_reg_1557) else "0";
    icmp_ln1027_4_fu_988_p2 <= "1" when (indvar_flatten_reg_326 = mul_ln6_reg_1652) else "0";
    icmp_ln1027_5_fu_1143_p2 <= "1" when (signed(sext_ln1027_fu_1139_p1) < signed(zext_ln1513_3_reg_1516)) else "0";
    icmp_ln1027_6_fu_999_p2 <= "1" when (jj_2_reg_348 = Kx_read_reg_1466) else "0";
    icmp_ln1027_fu_730_p2 <= "1" when (Wout_V_reg_1557 = ap_const_lv16_0) else "0";
    icmp_ln51_1_fu_1051_p2 <= "1" when (signed(h_V_cast_mid1_fu_1039_p1) < signed(zext_ln1513_8_reg_1526)) else "0";
    icmp_ln51_fu_983_p2 <= "1" when (signed(h_V_cast_fu_979_p1) < signed(zext_ln1513_8_reg_1526)) else "0";
    icmp_ln67_1_fu_1286_p2 <= "1" when (trunc_ln67_fu_1276_p1 = ap_const_lv23_0) else "0";
    icmp_ln67_fu_1280_p2 <= "0" when (tmp_1_fu_1266_p4 = ap_const_lv8_FF) else "1";
    ii_cast27_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_337),16));
    ii_cast27_mid1_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_fu_1012_p2),16));
    j_fu_1059_p2 <= std_logic_vector(signed(select_ln42_reg_1734) + signed(ap_const_lv16_1));
    jj_fu_1222_p2 <= std_logic_vector(unsigned(select_ln45_reg_1816) + unsigned(ap_const_lv8_1));
    mul_ln45_2_fu_1102_p0 <= mul_ln45_2_fu_1102_p00(8 - 1 downto 0);
    mul_ln45_2_fu_1102_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_2_reg_1833),16));
    mul_ln45_2_fu_1102_p1 <= Kx_cast14_reg_1633(8 - 1 downto 0);
    mul_ln6_fu_724_p0 <= mul_ln6_fu_724_p00(8 - 1 downto 0);
    mul_ln6_fu_724_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_read_reg_1459),16));
    mul_ln6_fu_724_p1 <= mul_ln6_fu_724_p10(8 - 1 downto 0);
    mul_ln6_fu_724_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_read_reg_1466),16));
    or_ln42_fu_874_p2 <= (select_ln1027_5_fu_867_p3 or icmp_ln1027_2_fu_806_p2);
    or_ln51_fu_1120_p2 <= (select_ln45_1_reg_1823 or ret_V_8_fu_1115_p2);
    or_ln67_fu_1292_p2 <= (icmp_ln67_fu_1280_p2 or icmp_ln67_1_fu_1286_p2);
    p_cast26_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_760_p3),64));
    p_cast26_mid1_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid_fu_817_p3),64));
    p_cast_fu_777_p4 <= empty_fu_772_p2(63 downto 2);
    p_cast_mid1_fu_834_p4 <= p_mid138_fu_829_p2(63 downto 2);
    p_mid138_fu_829_p2 <= std_logic_vector(unsigned(p_cast26_mid1_fu_825_p1) + unsigned(bias_read_reg_1420));
    p_mid1_fu_1022_p2 <= std_logic_vector(unsigned(sub_ln42_reg_1761) + unsigned(ii_cast27_mid1_fu_1018_p1));
    p_mid_fu_817_p3 <= (add_ln41_fu_811_p2 & ap_const_lv2_0);
    pad_x_V_1_cast10_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pad_x_V_1_reg_1506),16));
    pad_x_V_1_fu_553_p3 <= 
        pad_x_V_fu_488_p3 when (mode_read_reg_1441(0) = '1') else 
        ap_const_lv8_0;
    pad_x_V_fu_488_p3 <= 
        sub_ln1513_1_fu_472_p2 when (tmp_4_fu_448_p3(0) = '1') else 
        trunc_ln1513_2_fu_478_p4;
    pad_y_V_1_cast6_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pad_y_V_1_reg_1511),16));
    pad_y_V_1_fu_560_p3 <= 
        pad_y_V_fu_545_p3 when (mode_read_reg_1441(0) = '1') else 
        ap_const_lv8_0;
    pad_y_V_fu_545_p3 <= 
        sub_ln1513_3_fu_529_p2 when (tmp_5_fu_505_p3(0) = '1') else 
        trunc_ln1513_5_fu_535_p4;
    ret_V_6_fu_974_p2 <= std_logic_vector(unsigned(sub_ln42_reg_1761) + unsigned(ii_cast27_fu_970_p1));
    ret_V_8_fu_1115_p2 <= std_logic_vector(signed(sub_ln1495_reg_1756) + signed(zext_ln186_fu_1112_p1));
    ret_V_fu_1304_p2 <= (rhs_V_fu_1298_p2 and relu_en_read_reg_1436);
    rhs_V_7_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_read_reg_1481),48));
    rhs_V_fu_1298_p2 <= (or_ln67_fu_1292_p2 and grp_fu_406_p2);
    select_ln1027_1_fu_936_p3 <= 
        add_ln41_reg_1715 when (icmp_ln1027_2_reg_1706(0) = '1') else 
        cout_fu_202;
    select_ln1027_2_fu_844_p3 <= 
        p_cast_mid1_fu_834_p4 when (icmp_ln1027_2_fu_806_p2(0) = '1') else 
        p_cast_fu_777_p4;
    select_ln1027_3_fu_911_p3 <= 
        ap_const_lv16_0 when (icmp_ln1027_2_reg_1706(0) = '1') else 
        grp_fu_1334_p2;
    select_ln1027_4_fu_948_p3 <= 
        zext_ln1027_1_fu_941_p1 when (icmp_ln1027_2_reg_1706(0) = '1') else 
        add_ln541_reg_1693;
    select_ln1027_5_fu_867_p3 <= 
        icmp_ln1027_reg_1662 when (icmp_ln1027_2_fu_806_p2(0) = '1') else 
        icmp_ln1027_3_fu_862_p2;
    select_ln1027_6_fu_904_p3 <= 
        i_4_fu_894_p2 when (select_ln1027_5_reg_1727(0) = '1') else 
        select_ln1027_fu_888_p3;
    select_ln1027_7_fu_1070_p3 <= 
        ap_const_lv32_1 when (icmp_ln1027_2_reg_1706(0) = '1') else 
        add_ln1027_fu_1064_p2;
    select_ln1027_fu_888_p2 <= i_fu_194;
    select_ln1027_fu_888_p3 <= 
        ap_const_lv16_0 when (icmp_ln1027_2_reg_1706(0) = '1') else 
        select_ln1027_fu_888_p2;
    select_ln42_1_fu_917_p3 <= 
        grp_fu_1339_p2 when (select_ln1027_5_reg_1727(0) = '1') else 
        select_ln1027_3_fu_911_p3;
    select_ln42_2_fu_959_p3 <= 
        add_ln541_2_fu_954_p2 when (select_ln1027_5_reg_1727(0) = '1') else 
        select_ln1027_4_fu_948_p3;
    select_ln42_fu_880_p3 <= 
        ap_const_lv16_0 when (or_ln42_fu_874_p2(0) = '1') else 
        lhs_V_1_fu_190;
    select_ln45_1_fu_1027_p3 <= 
        p_mid1_fu_1022_p2 when (icmp_ln1027_6_fu_999_p2(0) = '1') else 
        ret_V_6_fu_974_p2;
    select_ln45_2_fu_1043_p3 <= 
        add_ln46_fu_1012_p2 when (icmp_ln1027_6_fu_999_p2(0) = '1') else 
        ii_reg_337;
    select_ln45_3_fu_1107_p3 <= 
        icmp_ln51_1_reg_1839 when (icmp_ln1027_6_reg_1811(0) = '1') else 
        icmp_ln51_reg_1798;
    select_ln45_fu_1004_p3 <= 
        ap_const_lv8_0 when (icmp_ln1027_6_fu_999_p2(0) = '1') else 
        jj_2_reg_348;
    select_ln70_fu_1309_p3 <= 
        ap_const_lv32_0 when (ret_V_fu_1304_p2(0) = '1') else 
        bitcast_ln67_fu_1263_p1;
        sext_ln1027_1_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1027_2_fu_844_p3),64));

        sext_ln1027_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_8_fu_1115_p2),17));

        sext_ln186_2_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_1174_p3),64));

        sext_ln70_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_1243_p4),64));

    shl_ln1513_1_fu_588_p3 <= (pad_y_V_1_fu_560_p3 & ap_const_lv1_0);
    shl_ln1_fu_1227_p3 <= (grp_fu_1355_p3 & ap_const_lv2_0);
    shl_ln2_fu_1174_p3 <= (grp_fu_1367_p3 & ap_const_lv2_0);
    shl_ln_fu_567_p3 <= (pad_x_V_1_fu_553_p3 & ap_const_lv1_0);
    sub_ln1513_1_fu_472_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln1513_1_fu_462_p4));
    sub_ln1513_2_fu_513_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(zext_ln1513_1_fu_496_p1));
    sub_ln1513_3_fu_529_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln1513_4_fu_519_p4));
    sub_ln1513_fu_456_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(zext_ln1513_fu_439_p1));
    sub_ln42_fu_923_p2 <= std_logic_vector(unsigned(select_ln42_1_fu_917_p3) - unsigned(pad_y_V_1_cast6_reg_1606));
    tmp_1_fu_1266_p4 <= bitcast_ln67_fu_1263_p1(30 downto 23);
    tmp_3_fu_760_p3 <= (cout_fu_202 & ap_const_lv2_0);
    tmp_4_fu_448_p3 <= add_ln1513_fu_442_p2(8 downto 8);
    tmp_5_fu_505_p3 <= add_ln1513_1_fu_499_p2(8 downto 8);
    tmp_6_fu_1125_p3 <= or_ln51_fu_1120_p2(15 downto 15);
    tmp_fu_1205_p2 <= std_logic_vector(unsigned(mul_ln45_3_reg_1888) + unsigned(zext_ln45_fu_1193_p1));
    trunc_ln1513_1_fu_462_p4 <= sub_ln1513_fu_456_p2(8 downto 1);
    trunc_ln1513_2_fu_478_p4 <= add_ln1513_fu_442_p2(8 downto 1);
    trunc_ln1513_4_fu_519_p4 <= sub_ln1513_2_fu_513_p2(8 downto 1);
    trunc_ln1513_5_fu_535_p4 <= add_ln1513_1_fu_499_p2(8 downto 1);
    trunc_ln186_1_fu_661_p1 <= sdiv_ln1513_1_reg_1564(16 - 1 downto 0);
    trunc_ln186_fu_651_p1 <= grp_fu_624_p2(16 - 1 downto 0);
    trunc_ln3_fu_1243_p4 <= add_ln70_fu_1238_p2(63 downto 2);
    trunc_ln67_fu_1276_p1 <= bitcast_ln67_fu_1263_p1(23 - 1 downto 0);
    xor_ln51_fu_1133_p2 <= (tmp_6_fu_1125_p3 xor ap_const_lv1_1);
    zext_ln1027_1_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_reg_1715),48));
    zext_ln1027_2_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_1_fu_936_p3),48));
    zext_ln1027_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cout_fu_202),48));
    zext_ln1513_10_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_read_reg_1459),18));
    zext_ln1513_1_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_read_reg_1459),9));
    zext_ln1513_2_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_567_p3),17));
    zext_ln1513_3_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_read_reg_1481),17));
    zext_ln1513_4_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1513_2_reg_1521),18));
    zext_ln1513_5_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_read_reg_1466),18));
    zext_ln1513_7_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1513_1_fu_588_p3),17));
    zext_ln1513_8_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hin_read_reg_1487),17));
    zext_ln1513_9_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1513_3_reg_1532),18));
    zext_ln1513_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_read_reg_1466),9));
    zext_ln186_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_reg_1816),16));
    zext_ln45_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1374_p2),32));
    zext_ln70_1_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_1227_p3),64));
end behav;
